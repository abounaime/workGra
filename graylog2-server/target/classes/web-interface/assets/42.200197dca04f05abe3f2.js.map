{"version":3,"sources":["webpack:///42.200197dca04f05abe3f2.js","webpack:///./src/components/grok-patterns/BulkLoadPatternModal.jsx","webpack:///./src/components/grok-patterns/EditPatternModal.jsx","webpack:///./src/components/grok-patterns/GrokPatterns.jsx","webpack:///./src/pages/GrokPatternsPage.jsx"],"names":["webpackJsonp","1250","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_react","_react2","_reactBootstrap","_bootstrap","_UserNotification","_UserNotification2","_StoreProvider","_StoreProvider2","_BootstrapModalForm","_BootstrapModalForm2","GrokPatternsStore","getStore","BulkLoadPatternModal","createClass","displayName","propTypes","onSuccess","PropTypes","func","isRequired","getInitialState","replacePatterns","_onSubmit","evt","_this","this","preventDefault","reader","FileReader","onload","loaded","request","target","result","bulkImport","state","then","success","refs","modal","close","props","readAsText","getInputDOMNode","files","render","_this2","createElement","Button","bsStyle","style","marginRight","onClick","open","ref","title","submitButtonText","formProps","onSubmit","Input","type","name","label","help","required","onChange","e","setState","checked","1251","EditPatternModal","id","string","pattern","create","bool","savePattern","validPatternName","error","error_message","openModal","_onPatternChange","event","_onNameChange","_getId","prefixIdName","undefined","_closeModal","_saved","_save","triggerButtonContent","className","BootstrapModalForm","onSubmitForm","autoFocus","1252","_PageHeader","_PageHeader2","_EditPatternModal","_EditPatternModal2","_BulkLoadPatternModal","_BulkLoadPatternModal2","_DataTable","_DataTable2","GrokPatterns","patterns","componentDidMount","loadData","loadPatterns","isMounted","some","callback","confirmedRemove","window","confirm","deletePattern","_headerCellFormatter","header","formattedHeaderCell","toLocaleLowerCase","_patternFormatter","key","bsSize","bind","reload","headers","filterKeys","Row","Col","md","headerCellFormatter","sortByKey","rows","dataRowFormatter","filterLabel","1380","_GrokPatterns","_GrokPatterns2","_common","GrokPatternsPage","DocumentTitle"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,QAASC,GAEjC,YA2BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAxBvFG,OAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GCTT,IAAAC,GAAAR,EAAA,GDcIS,EAAUR,EAAuBO,GCbrCE,EAAAV,EAAA,IAEAW,EAAAX,EAAA,IACAY,EAAAZ,EAAA,GDkBIa,EAAqBZ,EAAuBW,GChBhDE,EAAAd,EAAA,IDoBIe,EAAkBd,EAAuBa,GCjB7CE,EAAAhB,EAAA,KDqBIiB,EAAuBhB,EAAuBe,GCvB5CE,EAAoBH,EAAAX,QAAce,SAAS,gBAI3CC,EAAuBX,EAAAL,QAAMiB,aAAYC,YAAA,uBAC7CC,WACEC,UAAWf,EAAAL,QAAMqB,UAAUC,KAAKC,YAElCC,gBAJ6C,WAK3C,OACEC,iBAAiB,IAIrBC,UAV6C,SAUnCC,GAAK,GAAAC,GAAAC,IACbF,GAAIG,gBAEJ,IAAMC,GAAS,GAAIC,WAEnBD,GAAOE,OAAS,SAACC,GACf,GAAMC,GAAUD,EAAOE,OAAOC,MAC9BvB,GAAkBwB,WAAWH,EAASP,EAAKW,MAAMd,iBAAiBe,KAAK,WACrE/B,EAAAT,QAAiByC,QAAQ,sCAAuC,YAChEb,EAAKc,KAAKC,MAAMC,QAChBhB,EAAKiB,MAAMzB,eAIfW,EAAOe,WAAWjB,KAAKa,KAAK,gBAAgBK,kBAAkBC,MAAM,KAEtEC,OA1B6C,WA0BpC,GAAAC,GAAArB,IACP,OACExB,GAAAL,QAAAmD,cAAA,YACE9C,EAAAL,QAAAmD,cAAA7C,EAAA8C,QAAQC,QAAQ,OAAOC,OAASC,YAAa,GAAKC,QAAS,iBAAMN,GAAKR,KAAKC,MAAMc,SAAjF,uBAEApD,EAAAL,QAAAmD,cAAAtC,EAAAb,SAAoB0D,IAAI,QACFC,MAAM,iCACNC,iBAAiB,SACjBC,WAAaC,SAAUjC,KAAKH,YAChDrB,EAAAL,QAAAmD,cAAA5C,EAAAwD,OAAOC,KAAK,OACHN,IAAI,eACJO,KAAK,WACLC,MAAM,eACNC,KAAK,sGACLC,UAAA,IACT/D,EAAAL,QAAAmD,cAAA5C,EAAAwD,OAAOC,KAAK,WACHC,KAAK,UACLC,MAAM,iCACNG,SAAU,SAAAC,GAAA,MAAKpB,GAAKqB,UAAW9C,gBAAiB6C,EAAElC,OAAOoC,iBD+C5E7E,SAAQK,QCvCOgB,EDwCftB,EAAOC,QAAUA,QAAiB,SAI5B8E,KACA,SAAU/E,EAAQC,QAASC,GAEjC,YAGAK,QAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GElHT,IAAAC,GAAAR,EAAA,GFuHIS,EAIJ,SAAgCP,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAJlDM,GEtHrCG,EAAAX,EAAA,IAEM8E,EAAmBrE,EAAAL,QAAMiB,aAAYC,YAAA,mBACzCC,WACEwD,GAAItE,EAAAL,QAAMqB,UAAUuD,OACpBX,KAAM5D,EAAAL,QAAMqB,UAAUuD,OACtBC,QAASxE,EAAAL,QAAMqB,UAAUuD,OACzBE,OAAQzE,EAAAL,QAAMqB,UAAU0D,KACxBC,YAAa3E,EAAAL,QAAMqB,UAAUC,KAAKC,WAClC0D,iBAAkB5E,EAAAL,QAAMqB,UAAUC,KAAKC,YAEzCC,gBATyC,WAUvC,OACEmD,GAAI9C,KAAKgB,MAAM8B,GACfV,KAAMpC,KAAKgB,MAAMoB,KACjBY,QAAShD,KAAKgB,MAAMgC,QACpBK,OAAO,EACPC,cAAe,KAGnBC,UAlByC,WAmBvCvD,KAAKa,KAAKC,MAAMc,QAElB4B,iBArByC,SAqBxBC,GACfzD,KAAK0C,UAAWM,QAASS,EAAMlD,OAAOjC,SAExCoF,cAxByC,SAwB3BD,GACZ,GAAMrB,GAAOqB,EAAMlD,OAAOjC,KAErB0B,MAAKgB,MAAMoC,iBAAiBhB,GAG/BpC,KAAK0C,UAAWN,KAAMA,EAAMiB,OAAO,EAAOC,cAAe,KAFzDtD,KAAK0C,UAAWN,KAAMA,EAAMiB,OAAO,EAAMC,cAAe,4CAK5DK,OAjCyC,SAiClCC,GACL,WAA2BC,KAApB7D,KAAKU,MAAM0B,KAAqBwB,EAAe5D,KAAKU,MAAM0B,KAAOwB,GAE1EE,YApCyC,WAqCvC9D,KAAKa,KAAKC,MAAMC,SAElBgD,OAvCyC,WAwCvC/D,KAAK8D,cACD9D,KAAKgB,MAAMiC,QACbjD,KAAK0C,UAAWN,KAAM,GAAIY,QAAS,MAGvCgB,MA7CyC,WA8CvC,GAAMhB,GAAUhD,KAAKU,KAEhBsC,GAAQK,OACXrD,KAAKgB,MAAMmC,YAAYH,EAAShD,KAAK+D,SAGzC3C,OApDyC,WAqDvC,GAAI6C,SAMJ,OAJEA,GADEjE,KAAKgB,MAAMiC,OACU,iBAEAzE,EAAAL,QAAAmD,cAAA,oBAGvB9C,EAAAL,QAAAmD,cAAA,YACE9C,EAAAL,QAAAmD,cAAA,UAAQK,QAAS3B,KAAKuD,UAAWW,UAAWlE,KAAKgB,MAAMiC,OAAS,kBAAoB,uBACjFgB,GAEHzF,EAAAL,QAAAmD,cAAA5C,EAAAyF,oBAAoBtC,IAAI,QACIC,OAAU9B,KAAKgB,MAAMiC,OAAS,SAAW,QAAzC,iBAAgEjD,KAAKU,MAAM0B,KAC3EgC,aAAcpE,KAAKgE,MACnBjC,iBAAiB,QAC3CvD,EAAAL,QAAAmD,cAAA,gBACE9C,EAAAL,QAAAmD,cAAA5C,EAAAwD,OAAOC,KAAK,OACGW,GAAI9C,KAAK2D,OAAO,gBAChBtB,MAAM,OACNG,SAAUxC,KAAK0D,cACfpF,MAAO0B,KAAKU,MAAM0B,KAClBZ,QAASxB,KAAKU,MAAM2C,MAAQ,QAAU,KACtCf,KAAMtC,KAAKU,MAAM2C,MAAQrD,KAAKU,MAAM4C,cAAgB,KACpDe,WAAA,EACA9B,UAAA,IACf/D,EAAAL,QAAAmD,cAAA5C,EAAAwD,OAAOC,KAAK,WACGW,GAAI9C,KAAK2D,OAAO,WAChBtB,MAAM,UACNG,SAAUxC,KAAKwD,iBACflF,MAAO0B,KAAKU,MAAMsC,QAClBT,UAAA,SF8I3BzE,SAAQK,QEtIO0E,EFuIfhF,EAAOC,QAAUA,QAAiB,SAI5BwG,KACA,SAAUzG,EAAQC,QAASC,GAEjC,YAiCA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA9BvFG,OAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GGhPT,IAAAC,GAAAR,EAAA,GHqPIS,EAAUR,EAAuBO,GGpPrCE,EAAAV,EAAA,IAEAc,EAAAd,EAAA,IHwPIe,EAAkBd,EAAuBa,GGrP7C0F,EAAAxG,EAAA,KHyPIyG,EAAexG,EAAuBuG,GGxP1CE,EAAA1G,EAAA,MH4PI2G,EAAqB1G,EAAuByG,GG3PhDE,EAAA5G,EAAA,MH+PI6G,EAAyB5G,EAAuB2G,GG9PpDE,EAAA9G,EAAA,KHkQI+G,EAAc9G,EAAuB6G,GGvQnC5F,EAAoBH,EAAAX,QAAce,SAAS,gBAO3C6F,EAAevG,EAAAL,QAAMiB,aAAYC,YAAA,eACrCM,gBADqC,WAEnC,OACEqF,cAGJC,kBANqC,WAOnCjF,KAAKkF,YAEPA,SATqC,WAS1B,GAAAnF,GAAAC,IACTf,GAAkBkG,aAAa,SAACH,GAC1BjF,EAAKqF,aACPrF,EAAK2C,UACHsC,SAAUA,OAKlB5B,iBAlBqC,SAkBpBhB,GAEf,OAAQpC,KAAKU,MAAMsE,SAASK,KAAK,SAAArC,GAAA,MAAWA,GAAQZ,OAASA,KAE/De,YAtBqC,SAsBzBH,EAASsC,GAAU,GAAAjE,GAAArB,IAC7Bf,GAAkBkE,YAAYH,EAAS,WACrCsC,IACAjE,EAAK6D,cAGTK,gBA5BqC,SA4BrBvC,GACVwC,OAAOC,QAAP,kCAAiDzC,EAAQZ,KAAzD,0IACFnD,EAAkByG,cAAc1C,EAAShD,KAAKkF,WAGlDS,qBAjCqC,SAiChBC,GACnB,GAAIC,SAEJ,QAAQD,EAAOE,qBACb,IAAK,OACHD,EAAsBrH,EAAAL,QAAAmD,cAAA,MAAI4C,UAAU,QAAQ0B,EAC5C,MACF,KAAK,UACHC,EAAsBrH,EAAAL,QAAAmD,cAAA,MAAI4C,UAAU,WAAW0B,EAC/C,MACF,SACEC,EAAsBrH,EAAAL,QAAAmD,cAAA,UAAKsE,GAG/B,MAAOC,IAETE,kBAjDqC,SAiDnB/C,GAChB,MACExE,GAAAL,QAAAmD,cAAA,MAAI0E,IAAKhD,EAAQF,IACftE,EAAAL,QAAAmD,cAAA,UAAK0B,EAAQZ,MACb5D,EAAAL,QAAAmD,cAAA,UAAK0B,EAAQA,SACbxE,EAAAL,QAAAmD,cAAA,UACE9C,EAAAL,QAAAmD,cAAA7C,EAAA8C,QAAQE,OAASC,YAAa,GAAKF,QAAQ,UAAUyE,OAAO,KACpDtE,QAAS3B,KAAKuF,gBAAgBW,KAAKlG,KAAMgD,IADjD,UAIAxE,EAAAL,QAAAmD,cAAAoD,EAAAvG,SAAkB2E,GAAIE,EAAQF,GAAIV,KAAMY,EAAQZ,KAAMY,QAASA,EAAQA,QAASC,QAAQ,EACtEkD,OAAQnG,KAAKkF,SAAU/B,YAAanD,KAAKmD,YACzCC,iBAAkBpD,KAAKoD,sBAKjDhC,OAlEqC,WAmEnC,GAAMgF,IAAW,OAAQ,UAAW,WAC9BC,GAAc,OAEpB,OACE7H,GAAAL,QAAAmD,cAAA,WACE9C,EAAAL,QAAAmD,cAAAkD,EAAArG,SAAY2D,MAAM,iBAChBtD,EAAAL,QAAAmD,cAAA,4LAIC,KACD9C,EAAAL,QAAAmD,cAAA,YACE9C,EAAAL,QAAAmD,cAAAsD,EAAAzG,SAAsBoB,UAAWS,KAAKkF,WACtC1G,EAAAL,QAAAmD,cAAAoD,EAAAvG,SAAkB2E,GAAI,GAAIV,KAAM,GAAIY,QAAS,GAAIC,QAAA,EAC/BkD,OAAQnG,KAAKkF,SACb/B,YAAanD,KAAKmD,YAClBC,iBAAkBpD,KAAKoD,qBAI7C5E,EAAAL,QAAAmD,cAAA7C,EAAA6H,KAAKpC,UAAU,WACb1F,EAAAL,QAAAmD,cAAA7C,EAAA8H,KAAKC,GAAI,IACPhI,EAAAL,QAAAmD,cAAAwD,EAAA3G,SAAW2E,GAAG,oBACHoB,UAAU,4BACVkC,QAASA,EACTK,oBAAqBzG,KAAK2F,qBAC1Be,UAAW,OACXC,KAAM3G,KAAKU,MAAMsE,SACjB4B,iBAAkB5G,KAAK+F,kBACvBc,YAAY,kBACZR,WAAYA,SHqTnCvI,SAAQK,QG7SO4G,EH8SflH,EAAOC,QAAUA,QAAiB,SAI5BgJ,KACA,SAAUjJ,EAAQC,QAASC,GAEjC,YAiBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAdvFG,OAAOC,eAAeP,QAAS,cAC7BQ,OAAO,GI7aT,IAAAC,GAAAR,EAAA,GJkbIS,EAAUR,EAAuBO,GIhbrCwI,EAAAhJ,EAAA,MJobIiJ,EAAiBhJ,EAAuB+I,GInb5CE,EAAAlJ,EAAA,IAEMmJ,EAAmB1I,EAAAL,QAAMiB,aAAYC,YAAA,mBACzC+B,OADyC,WAEvC,MACE5C,GAAAL,QAAAmD,cAAA2F,EAAAE,eAAerF,MAAM,iBACnBtD,EAAAL,QAAAmD,cAAA0F,EAAA7I,QAAA,SJ8bRL,SAAQK,QIxbO+I,EJybfrJ,EAAOC,QAAUA,QAAiB","file":"42.200197dca04f05abe3f2.js","sourcesContent":["webpackJsonp([42],{\n\n/***/ 1250:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _bootstrap = __webpack_require__(43);\n\nvar _UserNotification = __webpack_require__(5);\n\nvar _UserNotification2 = _interopRequireDefault(_UserNotification);\n\nvar _StoreProvider = __webpack_require__(18);\n\nvar _StoreProvider2 = _interopRequireDefault(_StoreProvider);\n\nvar _BootstrapModalForm = __webpack_require__(261);\n\nvar _BootstrapModalForm2 = _interopRequireDefault(_BootstrapModalForm);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GrokPatternsStore = _StoreProvider2.default.getStore('GrokPatterns');\n\nvar BulkLoadPatternModal = _react2.default.createClass({\n  displayName: 'BulkLoadPatternModal',\n\n  propTypes: {\n    onSuccess: _react2.default.PropTypes.func.isRequired\n  },\n  getInitialState: function getInitialState() {\n    return {\n      replacePatterns: false\n    };\n  },\n  _onSubmit: function _onSubmit(evt) {\n    var _this = this;\n\n    evt.preventDefault();\n\n    var reader = new FileReader();\n\n    reader.onload = function (loaded) {\n      var request = loaded.target.result;\n      GrokPatternsStore.bulkImport(request, _this.state.replacePatterns).then(function () {\n        _UserNotification2.default.success('Grok Patterns imported successfully', 'Success!');\n        _this.refs.modal.close();\n        _this.props.onSuccess();\n      });\n    };\n\n    reader.readAsText(this.refs['pattern-file'].getInputDOMNode().files[0]);\n  },\n  render: function render() {\n    var _this2 = this;\n\n    return _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        _reactBootstrap.Button,\n        { bsStyle: 'info', style: { marginRight: 5 }, onClick: function onClick() {\n            return _this2.refs.modal.open();\n          } },\n        'Import pattern file'\n      ),\n      _react2.default.createElement(\n        _BootstrapModalForm2.default,\n        { ref: 'modal',\n          title: 'Import Grok patterns from file',\n          submitButtonText: 'Upload',\n          formProps: { onSubmit: this._onSubmit } },\n        _react2.default.createElement(_bootstrap.Input, { type: 'file',\n          ref: 'pattern-file',\n          name: 'patterns',\n          label: 'Pattern file',\n          help: 'A file containing Grok patterns, one per line. Name and patterns should be separated by whitespace.',\n          required: true }),\n        _react2.default.createElement(_bootstrap.Input, { type: 'checkbox',\n          name: 'replace',\n          label: 'Replace all existing patterns?',\n          onChange: function onChange(e) {\n            return _this2.setState({ replacePatterns: e.target.checked });\n          }\n        })\n      )\n    );\n  }\n});\n\nexports.default = BulkLoadPatternModal;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1251:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _bootstrap = __webpack_require__(43);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EditPatternModal = _react2.default.createClass({\n  displayName: 'EditPatternModal',\n\n  propTypes: {\n    id: _react2.default.PropTypes.string,\n    name: _react2.default.PropTypes.string,\n    pattern: _react2.default.PropTypes.string,\n    create: _react2.default.PropTypes.bool,\n    savePattern: _react2.default.PropTypes.func.isRequired,\n    validPatternName: _react2.default.PropTypes.func.isRequired\n  },\n  getInitialState: function getInitialState() {\n    return {\n      id: this.props.id,\n      name: this.props.name,\n      pattern: this.props.pattern,\n      error: false,\n      error_message: ''\n    };\n  },\n  openModal: function openModal() {\n    this.refs.modal.open();\n  },\n  _onPatternChange: function _onPatternChange(event) {\n    this.setState({ pattern: event.target.value });\n  },\n  _onNameChange: function _onNameChange(event) {\n    var name = event.target.value;\n\n    if (!this.props.validPatternName(name)) {\n      this.setState({ name: name, error: true, error_message: 'Pattern with that name already exists!' });\n    } else {\n      this.setState({ name: name, error: false, error_message: '' });\n    }\n  },\n  _getId: function _getId(prefixIdName) {\n    return this.state.name !== undefined ? prefixIdName + this.state.name : prefixIdName;\n  },\n  _closeModal: function _closeModal() {\n    this.refs.modal.close();\n  },\n  _saved: function _saved() {\n    this._closeModal();\n    if (this.props.create) {\n      this.setState({ name: '', pattern: '' });\n    }\n  },\n  _save: function _save() {\n    var pattern = this.state;\n\n    if (!pattern.error) {\n      this.props.savePattern(pattern, this._saved);\n    }\n  },\n  render: function render() {\n    var triggerButtonContent = void 0;\n    if (this.props.create) {\n      triggerButtonContent = 'Create pattern';\n    } else {\n      triggerButtonContent = _react2.default.createElement(\n        'span',\n        null,\n        'Edit'\n      );\n    }\n    return _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        'button',\n        { onClick: this.openModal, className: this.props.create ? 'btn btn-success' : 'btn btn-info btn-xs' },\n        triggerButtonContent\n      ),\n      _react2.default.createElement(\n        _bootstrap.BootstrapModalForm,\n        { ref: 'modal',\n          title: (this.props.create ? 'Create' : 'Edit') + ' Grok Pattern ' + this.state.name,\n          onSubmitForm: this._save,\n          submitButtonText: 'Save' },\n        _react2.default.createElement(\n          'fieldset',\n          null,\n          _react2.default.createElement(_bootstrap.Input, { type: 'text',\n            id: this._getId('pattern-name'),\n            label: 'Name',\n            onChange: this._onNameChange,\n            value: this.state.name,\n            bsStyle: this.state.error ? 'error' : null,\n            help: this.state.error ? this.state.error_message : null,\n            autoFocus: true,\n            required: true }),\n          _react2.default.createElement(_bootstrap.Input, { type: 'textarea',\n            id: this._getId('pattern'),\n            label: 'Pattern',\n            onChange: this._onPatternChange,\n            value: this.state.pattern,\n            required: true })\n        )\n      )\n    );\n  }\n});\n\nexports.default = EditPatternModal;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1252:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _StoreProvider = __webpack_require__(18);\n\nvar _StoreProvider2 = _interopRequireDefault(_StoreProvider);\n\nvar _PageHeader = __webpack_require__(265);\n\nvar _PageHeader2 = _interopRequireDefault(_PageHeader);\n\nvar _EditPatternModal = __webpack_require__(1251);\n\nvar _EditPatternModal2 = _interopRequireDefault(_EditPatternModal);\n\nvar _BulkLoadPatternModal = __webpack_require__(1250);\n\nvar _BulkLoadPatternModal2 = _interopRequireDefault(_BulkLoadPatternModal);\n\nvar _DataTable = __webpack_require__(277);\n\nvar _DataTable2 = _interopRequireDefault(_DataTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GrokPatternsStore = _StoreProvider2.default.getStore('GrokPatterns');\n\nvar GrokPatterns = _react2.default.createClass({\n  displayName: 'GrokPatterns',\n  getInitialState: function getInitialState() {\n    return {\n      patterns: []\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.loadData();\n  },\n  loadData: function loadData() {\n    var _this = this;\n\n    GrokPatternsStore.loadPatterns(function (patterns) {\n      if (_this.isMounted()) {\n        _this.setState({\n          patterns: patterns\n        });\n      }\n    });\n  },\n  validPatternName: function validPatternName(name) {\n    // Check if patterns already contain a pattern with the given name.\n    return !this.state.patterns.some(function (pattern) {\n      return pattern.name === name;\n    });\n  },\n  savePattern: function savePattern(pattern, callback) {\n    var _this2 = this;\n\n    GrokPatternsStore.savePattern(pattern, function () {\n      callback();\n      _this2.loadData();\n    });\n  },\n  confirmedRemove: function confirmedRemove(pattern) {\n    if (window.confirm('Really delete the grok pattern ' + pattern.name + '?\\nIt will be removed from the system and unavailable for any extractor. If it is still in use by extractors those will fail to work.')) {\n      GrokPatternsStore.deletePattern(pattern, this.loadData);\n    }\n  },\n  _headerCellFormatter: function _headerCellFormatter(header) {\n    var formattedHeaderCell = void 0;\n\n    switch (header.toLocaleLowerCase()) {\n      case 'name':\n        formattedHeaderCell = _react2.default.createElement(\n          'th',\n          { className: 'name' },\n          header\n        );\n        break;\n      case 'actions':\n        formattedHeaderCell = _react2.default.createElement(\n          'th',\n          { className: 'actions' },\n          header\n        );\n        break;\n      default:\n        formattedHeaderCell = _react2.default.createElement(\n          'th',\n          null,\n          header\n        );\n    }\n\n    return formattedHeaderCell;\n  },\n  _patternFormatter: function _patternFormatter(pattern) {\n    return _react2.default.createElement(\n      'tr',\n      { key: pattern.id },\n      _react2.default.createElement(\n        'td',\n        null,\n        pattern.name\n      ),\n      _react2.default.createElement(\n        'td',\n        null,\n        pattern.pattern\n      ),\n      _react2.default.createElement(\n        'td',\n        null,\n        _react2.default.createElement(\n          _reactBootstrap.Button,\n          { style: { marginRight: 5 }, bsStyle: 'primary', bsSize: 'xs',\n            onClick: this.confirmedRemove.bind(this, pattern) },\n          'Delete'\n        ),\n        _react2.default.createElement(_EditPatternModal2.default, { id: pattern.id, name: pattern.name, pattern: pattern.pattern, create: false,\n          reload: this.loadData, savePattern: this.savePattern,\n          validPatternName: this.validPatternName })\n      )\n    );\n  },\n  render: function render() {\n    var headers = ['Name', 'Pattern', 'Actions'];\n    var filterKeys = ['name'];\n\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(\n        _PageHeader2.default,\n        { title: 'Grok patterns' },\n        _react2.default.createElement(\n          'span',\n          null,\n          'This is a list of grok patterns you can use in your Graylog grok extractors. You can add your own manually or import a whole list of patterns from a so called pattern file.'\n        ),\n        null,\n        _react2.default.createElement(\n          'span',\n          null,\n          _react2.default.createElement(_BulkLoadPatternModal2.default, { onSuccess: this.loadData }),\n          _react2.default.createElement(_EditPatternModal2.default, { id: '', name: '', pattern: '', create: true,\n            reload: this.loadData,\n            savePattern: this.savePattern,\n            validPatternName: this.validPatternName })\n        )\n      ),\n      _react2.default.createElement(\n        _reactBootstrap.Row,\n        { className: 'content' },\n        _react2.default.createElement(\n          _reactBootstrap.Col,\n          { md: 12 },\n          _react2.default.createElement(_DataTable2.default, { id: 'grok-pattern-list',\n            className: 'table-striped table-hover',\n            headers: headers,\n            headerCellFormatter: this._headerCellFormatter,\n            sortByKey: 'name',\n            rows: this.state.patterns,\n            dataRowFormatter: this._patternFormatter,\n            filterLabel: 'Filter patterns',\n            filterKeys: filterKeys })\n        )\n      )\n    );\n  }\n});\n\nexports.default = GrokPatterns;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1380:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _GrokPatterns = __webpack_require__(1252);\n\nvar _GrokPatterns2 = _interopRequireDefault(_GrokPatterns);\n\nvar _common = __webpack_require__(48);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GrokPatternsPage = _react2.default.createClass({\n  displayName: 'GrokPatternsPage',\n  render: function render() {\n    return _react2.default.createElement(\n      _common.DocumentTitle,\n      { title: 'Grok patterns' },\n      _react2.default.createElement(_GrokPatterns2.default, null)\n    );\n  }\n});\n\nexports.default = GrokPatternsPage;\nmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 42.200197dca04f05abe3f2.js","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport { Input } from 'components/bootstrap';\nimport UserNotification from 'util/UserNotification';\n\nimport StoreProvider from 'injection/StoreProvider';\nconst GrokPatternsStore = StoreProvider.getStore('GrokPatterns');\n\nimport BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n\nconst BulkLoadPatternModal = React.createClass({\n  propTypes: {\n    onSuccess: React.PropTypes.func.isRequired,\n  },\n  getInitialState() {\n    return {\n      replacePatterns: false,\n    };\n  },\n\n  _onSubmit(evt) {\n    evt.preventDefault();\n\n    const reader = new FileReader();\n\n    reader.onload = (loaded) => {\n      const request = loaded.target.result;\n      GrokPatternsStore.bulkImport(request, this.state.replacePatterns).then(() => {\n        UserNotification.success('Grok Patterns imported successfully', 'Success!');\n        this.refs.modal.close();\n        this.props.onSuccess();\n      });\n    };\n\n    reader.readAsText(this.refs['pattern-file'].getInputDOMNode().files[0]);\n  },\n  render() {\n    return (\n      <span>\n        <Button bsStyle=\"info\" style={{ marginRight: 5 }} onClick={() => this.refs.modal.open()}>Import pattern file</Button>\n\n        <BootstrapModalForm ref=\"modal\"\n                              title=\"Import Grok patterns from file\"\n                              submitButtonText=\"Upload\"\n                              formProps={{ onSubmit: this._onSubmit }}>\n          <Input type=\"file\"\n                   ref=\"pattern-file\"\n                   name=\"patterns\"\n                   label=\"Pattern file\"\n                   help=\"A file containing Grok patterns, one per line. Name and patterns should be separated by whitespace.\"\n                   required />\n          <Input type=\"checkbox\"\n                   name=\"replace\"\n                   label=\"Replace all existing patterns?\"\n                   onChange={e => this.setState({ replacePatterns: e.target.checked })}\n            />\n        </BootstrapModalForm>\n      </span>\n    );\n  },\n});\n\nexport default BulkLoadPatternModal;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/grok-patterns/BulkLoadPatternModal.jsx","import React from 'react';\nimport { BootstrapModalForm, Input } from 'components/bootstrap';\n\nconst EditPatternModal = React.createClass({\n  propTypes: {\n    id: React.PropTypes.string,\n    name: React.PropTypes.string,\n    pattern: React.PropTypes.string,\n    create: React.PropTypes.bool,\n    savePattern: React.PropTypes.func.isRequired,\n    validPatternName: React.PropTypes.func.isRequired,\n  },\n  getInitialState() {\n    return {\n      id: this.props.id,\n      name: this.props.name,\n      pattern: this.props.pattern,\n      error: false,\n      error_message: '',\n    };\n  },\n  openModal() {\n    this.refs.modal.open();\n  },\n  _onPatternChange(event) {\n    this.setState({ pattern: event.target.value });\n  },\n  _onNameChange(event) {\n    const name = event.target.value;\n\n    if (!this.props.validPatternName(name)) {\n      this.setState({ name: name, error: true, error_message: 'Pattern with that name already exists!' });\n    } else {\n      this.setState({ name: name, error: false, error_message: '' });\n    }\n  },\n  _getId(prefixIdName) {\n    return this.state.name !== undefined ? prefixIdName + this.state.name : prefixIdName;\n  },\n  _closeModal() {\n    this.refs.modal.close();\n  },\n  _saved() {\n    this._closeModal();\n    if (this.props.create) {\n      this.setState({ name: '', pattern: '' });\n    }\n  },\n  _save() {\n    const pattern = this.state;\n\n    if (!pattern.error) {\n      this.props.savePattern(pattern, this._saved);\n    }\n  },\n  render() {\n    let triggerButtonContent;\n    if (this.props.create) {\n      triggerButtonContent = 'Create pattern';\n    } else {\n      triggerButtonContent = <span>Edit</span>;\n    }\n    return (\n      <span>\n        <button onClick={this.openModal} className={this.props.create ? 'btn btn-success' : 'btn btn-info btn-xs'}>\n          {triggerButtonContent}\n        </button>\n        <BootstrapModalForm ref=\"modal\"\n                                    title={`${this.props.create ? 'Create' : 'Edit'} Grok Pattern ${this.state.name}`}\n                                    onSubmitForm={this._save}\n                                    submitButtonText=\"Save\">\n          <fieldset>\n            <Input type=\"text\"\n                           id={this._getId('pattern-name')}\n                           label=\"Name\"\n                           onChange={this._onNameChange}\n                           value={this.state.name}\n                           bsStyle={this.state.error ? 'error' : null}\n                           help={this.state.error ? this.state.error_message : null}\n                           autoFocus\n                           required />\n            <Input type=\"textarea\"\n                           id={this._getId('pattern')}\n                           label=\"Pattern\"\n                           onChange={this._onPatternChange}\n                           value={this.state.pattern}\n                           required />\n          </fieldset>\n        </BootstrapModalForm>\n      </span>\n    );\n  },\n});\n\nexport default EditPatternModal;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/grok-patterns/EditPatternModal.jsx","import React from 'react';\nimport { Row, Col, Button } from 'react-bootstrap';\n\nimport StoreProvider from 'injection/StoreProvider';\nconst GrokPatternsStore = StoreProvider.getStore('GrokPatterns');\n\nimport PageHeader from 'components/common/PageHeader';\nimport EditPatternModal from 'components/grok-patterns/EditPatternModal';\nimport BulkLoadPatternModal from 'components/grok-patterns/BulkLoadPatternModal';\nimport DataTable from 'components/common/DataTable';\n\nconst GrokPatterns = React.createClass({\n  getInitialState() {\n    return {\n      patterns: [],\n    };\n  },\n  componentDidMount() {\n    this.loadData();\n  },\n  loadData() {\n    GrokPatternsStore.loadPatterns((patterns) => {\n      if (this.isMounted()) {\n        this.setState({\n          patterns: patterns,\n        });\n      }\n    });\n  },\n  validPatternName(name) {\n    // Check if patterns already contain a pattern with the given name.\n    return !this.state.patterns.some(pattern => pattern.name === name);\n  },\n  savePattern(pattern, callback) {\n    GrokPatternsStore.savePattern(pattern, () => {\n      callback();\n      this.loadData();\n    });\n  },\n  confirmedRemove(pattern) {\n    if (window.confirm(`Really delete the grok pattern ${pattern.name}?\\nIt will be removed from the system and unavailable for any extractor. If it is still in use by extractors those will fail to work.`)) {\n      GrokPatternsStore.deletePattern(pattern, this.loadData);\n    }\n  },\n  _headerCellFormatter(header) {\n    let formattedHeaderCell;\n\n    switch (header.toLocaleLowerCase()) {\n      case 'name':\n        formattedHeaderCell = <th className=\"name\">{header}</th>;\n        break;\n      case 'actions':\n        formattedHeaderCell = <th className=\"actions\">{header}</th>;\n        break;\n      default:\n        formattedHeaderCell = <th>{header}</th>;\n    }\n\n    return formattedHeaderCell;\n  },\n  _patternFormatter(pattern) {\n    return (\n      <tr key={pattern.id}>\n        <td>{pattern.name}</td>\n        <td>{pattern.pattern}</td>\n        <td>\n          <Button style={{ marginRight: 5 }} bsStyle=\"primary\" bsSize=\"xs\"\n                  onClick={this.confirmedRemove.bind(this, pattern)}>\n            Delete\n          </Button>\n          <EditPatternModal id={pattern.id} name={pattern.name} pattern={pattern.pattern} create={false}\n                            reload={this.loadData} savePattern={this.savePattern}\n                            validPatternName={this.validPatternName} />\n        </td>\n      </tr>\n    );\n  },\n  render() {\n    const headers = ['Name', 'Pattern', 'Actions'];\n    const filterKeys = ['name'];\n\n    return (\n      <div>\n        <PageHeader title=\"Grok patterns\">\n          <span>\n            This is a list of grok patterns you can use in your Graylog grok extractors. You can add\n            your own manually or import a whole list of patterns from a so called pattern file.\n          </span>\n          {null}\n          <span>\n            <BulkLoadPatternModal onSuccess={this.loadData} />\n            <EditPatternModal id={''} name={''} pattern={''} create\n                              reload={this.loadData}\n                              savePattern={this.savePattern}\n                              validPatternName={this.validPatternName} />\n          </span>\n        </PageHeader>\n\n        <Row className=\"content\">\n          <Col md={12}>\n            <DataTable id=\"grok-pattern-list\"\n                       className=\"table-striped table-hover\"\n                       headers={headers}\n                       headerCellFormatter={this._headerCellFormatter}\n                       sortByKey={'name'}\n                       rows={this.state.patterns}\n                       dataRowFormatter={this._patternFormatter}\n                       filterLabel=\"Filter patterns\"\n                       filterKeys={filterKeys} />\n          </Col>\n        </Row>\n      </div>\n    );\n  },\n});\n\nexport default GrokPatterns;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/grok-patterns/GrokPatterns.jsx","import React from 'react';\n\nimport GrokPatterns from 'components/grok-patterns/GrokPatterns';\nimport { DocumentTitle } from 'components/common';\n\nconst GrokPatternsPage = React.createClass({\n  render() {\n    return (\n      <DocumentTitle title=\"Grok patterns\">\n        <GrokPatterns />\n      </DocumentTitle>\n    );\n  },\n});\n\nexport default GrokPatternsPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/GrokPatternsPage.jsx"],"sourceRoot":""}