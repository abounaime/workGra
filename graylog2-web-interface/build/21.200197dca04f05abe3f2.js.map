{"version":3,"sources":["webpack:///21.200197dca04f05abe3f2.js","webpack:///./src/components/authentication/AccessTokenConfig.jsx","webpack:///./src/components/authentication/AuthProvidersConfig.jsx","webpack:///./src/components/authentication/AuthenticationComponent.jsx","webpack:///./src/components/authentication/LegacyLdapConfig.jsx","webpack:///./src/components/authentication/MongoDbPasswordConfig.jsx","webpack:///./src/components/authentication/MongoDbSessionConfig.jsx","webpack:///./src/components/authentication/RootUserConfig.jsx","webpack:///./src/components/authentication/index.js","webpack:///./src/components/ldap/LdapComponent.jsx","webpack:///./src/components/ldap/LdapGroupsComponent.jsx","webpack:///./src/components/ldap/TestLdapConnection.jsx","webpack:///./src/components/ldap/TestLdapLogin.jsx","webpack:///./src/pages/AuthenticationPage.jsx","webpack:///./src/components/authentication/AuthenticationComponent.css","webpack:///./src/components/ldap/TestLdapLogin.css","webpack:///./src/components/authentication/AuthenticationComponent.css?2d97","webpack:///./src/components/ldap/TestLdapLogin.css?3ec1"],"names":["webpackJsonp","1216","module","exports","__webpack_require__","Object","defineProperty","value","_react","_react2","obj","__esModule","default","_common","AccessTokenConfig","createElement","DocumentTitle","title","PageHeader","subpage","1217","_interopRequireDefault","_reactBootstrap","_BootstrapModalForm","_BootstrapModalForm2","_Routes","_Routes2","_ObjectUtils","_ObjectUtils2","_javascriptNaturalSort","_javascriptNaturalSort2","AuthProvidersConfig","createClass","displayName","propTypes","config","PropTypes","object","isRequired","descriptors","updateConfig","func","history","getDefaultProps","disabled_realms","realm_order","getInitialState","this","props","_openModal","refs","configModal","open","_closeModal","close","_saveConfig","_this","_hasNoActiveRealm","state","then","_resetConfig","setState","_onCancel","pushState","SYSTEM","AUTHENTICATION","OVERVIEW","_updateSorting","newSorting","update","clone","map","entry","id","_toggleStatus","realmName","_this2","disabledProcessors","checked","filter","p","indexOf","push","length","_noActiveRealmWarning","Alert","bsStyle","_summary","_this3","name","idx","status","disabledName","realm","key","description","_sortableItems","_this4","_statusForm","_this5","sort","a","b","enabled","ref","type","disabled","canBeDisabled","onChange","render","Row","Col","md","Table","striped","bordered","className","IfPermitted","permissions","Button","onClick","onSubmitForm","onModalClose","submitButtonText","SortableList","items","onMoveItem","condensed","1218","_reflux","_reflux2","_reactRouterBootstrap","_plugin","_PermissionsMixin","_PermissionsMixin2","_AuthProvidersConfig","_AuthProvidersConfig2","_ActionsProvider","_ActionsProvider2","_StoreProvider","_StoreProvider2","_AuthenticationComponent","_AuthenticationComponent2","AuthenticationActions","getActions","AuthenticationStore","getStore","CurrentUserStore","AuthenticationComponent","location","params","children","element","mixins","connect","componentDidMount","load","PluginStore","forEach","authConfig","authenticatorConfigurations","_pluginPane","auth","component","_onUpdateProviders","_contentComponent","authenticators","undefined","Spinner","auths","isPermitted","currentUser","numberedTitle","LinkContainer","to","PROVIDERS","provider","NavItem","unshift","divider","CONFIG","ROLES","USERS","LIST","edit","encodeURIComponent","username","subnavigation","Nav","stacked","contentComponent","Children","count","only","contentpane","1219","_LdapComponent","_LdapComponent2","_LdapGroupsComponent","_LdapGroupsComponent2","_CombinedProvider","_CombinedProvider2","_CombinedProvider$get","get","LdapActions","LegacyLdapConfig","showSettings","loadSettings","_toggleButton","_onSettingsCancel","toggleButtonText","activeComponent","onCancel","onShowGroups","onShowConfig","1220","MongoDbPasswordConfig","1221","MongoDbSessionConfig","1222","RootUserConfig","1223","_MongoDbPasswordConfig","_MongoDbPasswordConfig2","_MongoDbSessionConfig","_MongoDbSessionConfig2","_LegacyLdapConfig","_LegacyLdapConfig2","_RootUserConfig","_RootUserConfig2","_AccessTokenConfig","_AccessTokenConfig2","register","PluginManifest","1254","_typeof","Symbol","iterator","constructor","prototype","_urijs","_urijs2","_bootstrap","_TestLdapConnection","_TestLdapConnection2","_TestLdapLogin","_TestLdapLogin2","RolesStore","LdapStore","HelperText","activeDirectory","SYSTEM_USERNAME","SYSTEM_PASSWORD","SEARCH_BASE","SEARCH_PATTERN","DISPLAY_NAME","GROUP_SEARCH_BASE","GROUP_PATTERN","GROUP_ID","defaultGroup","onClickHandler","href","ADDITIONAL_GROUPS","ldap","LdapComponent","listenTo","ldapSettings","ldapUri","roles","loadRoles","_formatAdditionalRoles","r","toLowerCase","r1","r2","label","_onLdapSettingsChange","settings","ldap_uri","_isLoading","_bindChecked","ev","_setSetting","target","_bindValue","_updateSsl","_setUriScheme","attribute","newState","formattedValue","toString","serverConnectionStatus","scheme","_uriScheme","_setUriHost","host","hostname","_uriHost","_setUriPort","port","_uriPort","_setAdditionalDefaultGroups","rolesString","split","v","_saveSettings","event","preventDefault","_onShowGroups","isAD","active_directory","help","rolesOptions","lg","onSubmit","Input","wrapperClassName","sm","labelClassName","placeholder","required","min","max","style","width","use_start_tls","trust_all_certificates","system_username","system_password","search_base","search_pattern","display_name_attribute","group_search_base","group_search_pattern","group_id_attribute","default_group","smOffset","Panel","MultiSelect","options","additional_default_groups","1255","_immutable","_immutable2","LdapGroupsActions","LdapGroupsComponent","groups","Set","of","mapping","Map","groupsErrorMessage","loadMapping","triggerPromise","loadGroups","error","additional","_updateMapping","role","group","getAttribute","delete","set","_saveMapping","saveMapping","toJS","_onShowConfig","header","message","insensitive","content","data-group","size","padding","mdPush","1256","TestLdapConnection","bool","componentWillReceiveProps","nextProps","JSON","stringify","_testServerConnection","testServerConnection","result","connected","loading","success","exception","_getServerConnectionStyle","isDisabled","serverConnectionResult","1257","TestLdapLogin","loginUser","loginPassword","loginStatus","use","componentWillUnmount","unuse","_changeLoginForm","_disableSubmitOnEnter","_testLogin","testLogin","login_authenticated","isEmpty","_loginTestButtonStyle","_formatLoginStatus","userFound","loginCheck","serverResponse","attributes","keys","formattedEntry","formattedGroups","loginDisabled","onKeyPress","testLoginPassword","1367","_DocsHelper","_DocsHelper2","_PageHeader","_PageHeader2","_DocumentationLink","_DocumentationLink2","AuthenticationPage","page","PAGES","USERS_ROLES","text","1422","i","locals","1423","1493","1500","dispose","unref"],"mappings":"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","file":"21.200197dca04f05abe3f2.js","sourcesContent":["webpackJsonp([21],{\n\n/***/ 1216:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _common = __webpack_require__(48);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AccessTokenConfig = function AccessTokenConfig() {\n  return _react2.default.createElement(\n    _common.DocumentTitle,\n    { title: 'Access Token Authenticator' },\n    _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        _common.PageHeader,\n        { title: 'Access Token Authenticator', subpage: true },\n        _react2.default.createElement(\n          'span',\n          null,\n          'Each user can generate access tokens to avoid having to use their main password in insecure scripts.'\n        )\n      ),\n      _react2.default.createElement(\n        'span',\n        null,\n        'There currently is no configuration available for access tokens. You can safely disable this authenticator if you do not use access tokens.'\n      )\n    )\n  );\n};\n\nexports.default = AccessTokenConfig;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1217:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _BootstrapModalForm = __webpack_require__(261);\n\nvar _BootstrapModalForm2 = _interopRequireDefault(_BootstrapModalForm);\n\nvar _common = __webpack_require__(48);\n\nvar _Routes = __webpack_require__(75);\n\nvar _Routes2 = _interopRequireDefault(_Routes);\n\nvar _ObjectUtils = __webpack_require__(259);\n\nvar _ObjectUtils2 = _interopRequireDefault(_ObjectUtils);\n\nvar _javascriptNaturalSort = __webpack_require__(951);\n\nvar _javascriptNaturalSort2 = _interopRequireDefault(_javascriptNaturalSort);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AuthProvidersConfig = _react2.default.createClass({\n  displayName: 'AuthProvidersConfig',\n\n  propTypes: {\n    config: _react2.default.PropTypes.object.isRequired,\n    descriptors: _react2.default.PropTypes.object.isRequired,\n    updateConfig: _react2.default.PropTypes.func.isRequired,\n    history: _react2.default.PropTypes.object.isRequired\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      config: {\n        disabled_realms: [],\n        realm_order: []\n      }\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      config: {\n        disabled_realms: this.props.config.disabled_realms,\n        realm_order: this.props.config.realm_order\n      }\n    };\n  },\n  _openModal: function _openModal() {\n    this.refs.configModal.open();\n  },\n  _closeModal: function _closeModal() {\n    this.refs.configModal.close();\n  },\n  _saveConfig: function _saveConfig() {\n    var _this = this;\n\n    if (!this._hasNoActiveRealm()) {\n      this.props.updateConfig(this.state.config).then(function () {\n        _this._closeModal();\n      });\n    }\n  },\n  _resetConfig: function _resetConfig() {\n    // Reset to initial state when the modal is closed without saving.\n    this.setState(this.getInitialState());\n  },\n  _onCancel: function _onCancel() {\n    this.props.history.pushState(null, _Routes2.default.SYSTEM.AUTHENTICATION.OVERVIEW);\n  },\n  _updateSorting: function _updateSorting(newSorting) {\n    var update = _ObjectUtils2.default.clone(this.state.config);\n\n    update.realm_order = newSorting.map(function (entry) {\n      return entry.id;\n    });\n\n    this.setState({ config: update });\n  },\n  _toggleStatus: function _toggleStatus(realmName) {\n    var _this2 = this;\n\n    return function () {\n      var disabledProcessors = _this2.state.config.disabled_realms;\n      var update = _ObjectUtils2.default.clone(_this2.state.config);\n      var checked = _this2.refs[realmName].checked;\n\n      if (checked) {\n        update.disabled_realms = disabledProcessors.filter(function (p) {\n          return p !== realmName;\n        });\n      } else if (disabledProcessors.indexOf(realmName) === -1) {\n        update.disabled_realms.push(realmName);\n      }\n\n      _this2.setState({ config: update });\n    };\n  },\n  _hasNoActiveRealm: function _hasNoActiveRealm() {\n    return this.state.config.disabled_realms.length >= this.state.config.realm_order.length;\n  },\n  _noActiveRealmWarning: function _noActiveRealmWarning() {\n    if (this._hasNoActiveRealm()) {\n      return _react2.default.createElement(\n        _reactBootstrap.Alert,\n        { bsStyle: 'danger' },\n        _react2.default.createElement(\n          'strong',\n          null,\n          'ERROR:'\n        ),\n        ' No active authentication provider!'\n      );\n    }\n    return null;\n  },\n  _summary: function _summary() {\n    var _this3 = this;\n\n    return this.state.config.realm_order.map(function (name, idx) {\n      var status = _this3.state.config.disabled_realms.filter(function (disabledName) {\n        return disabledName === name;\n      }).length > 0 ? 'disabled' : 'active';\n      var realm = _this3.props.descriptors[name] || { id: name, title: 'Unavailable' };\n      return _react2.default.createElement(\n        'tr',\n        { key: idx },\n        _react2.default.createElement(\n          'td',\n          null,\n          idx + 1\n        ),\n        _react2.default.createElement(\n          'td',\n          null,\n          realm.displayName\n        ),\n        _react2.default.createElement(\n          'td',\n          null,\n          realm.description\n        ),\n        _react2.default.createElement(\n          'td',\n          null,\n          status\n        )\n      );\n    });\n  },\n  _sortableItems: function _sortableItems() {\n    var _this4 = this;\n\n    return this.state.config.realm_order.map(function (name) {\n      var realm = _this4.props.descriptors[name] || { id: name, title: 'Unavailable' };\n      return { id: realm.name, title: realm.displayName };\n    });\n  },\n  _statusForm: function _statusForm() {\n    var _this5 = this;\n\n    return _ObjectUtils2.default.clone(this.state.config.realm_order).sort(function (a, b) {\n      return (0, _javascriptNaturalSort2.default)(a.displayName, b.displayName);\n    }).map(function (realmName, idx) {\n      var enabled = _this5.state.config.disabled_realms.filter(function (disabledName) {\n        return disabledName === realmName;\n      }).length < 1;\n      var realm = _this5.props.descriptors[realmName] || { id: realmName, displayName: 'Unavailable' };\n\n      return _react2.default.createElement(\n        'tr',\n        { key: idx },\n        _react2.default.createElement(\n          'td',\n          null,\n          realm.displayName\n        ),\n        _react2.default.createElement(\n          'td',\n          null,\n          _react2.default.createElement('input', { ref: realm.name,\n            type: 'checkbox',\n            checked: enabled,\n            disabled: !realm.canBeDisabled,\n            onChange: _this5._toggleStatus(realm.name) })\n        )\n      );\n    });\n  },\n  render: function render() {\n    return _react2.default.createElement(\n      _common.DocumentTitle,\n      { title: 'Authentication Providers' },\n      _react2.default.createElement(\n        'span',\n        null,\n        _react2.default.createElement(\n          _common.PageHeader,\n          { title: 'Authentication Providers', subpage: true },\n          _react2.default.createElement(\n            'span',\n            null,\n            'The following authentication providers executed in order during login. Disabled providers will be skipped.',\n            _react2.default.createElement('br', null),\n            'A user is authenticated by the first matching provider, a successful match can cause a Graylog account for this user to be created.'\n          )\n        ),\n        _react2.default.createElement(\n          _reactBootstrap.Row,\n          null,\n          _react2.default.createElement(\n            _reactBootstrap.Col,\n            { md: 6 },\n            _react2.default.createElement(\n              _reactBootstrap.Table,\n              { striped: true, bordered: true, className: 'top-margin' },\n              _react2.default.createElement(\n                'thead',\n                null,\n                _react2.default.createElement(\n                  'tr',\n                  null,\n                  _react2.default.createElement(\n                    'th',\n                    null,\n                    '#'\n                  ),\n                  _react2.default.createElement(\n                    'th',\n                    null,\n                    'Provider'\n                  ),\n                  _react2.default.createElement(\n                    'th',\n                    null,\n                    'Description'\n                  ),\n                  _react2.default.createElement(\n                    'th',\n                    null,\n                    'Status'\n                  )\n                )\n              ),\n              _react2.default.createElement(\n                'tbody',\n                null,\n                this._summary()\n              )\n            ),\n            _react2.default.createElement(\n              _common.IfPermitted,\n              { permissions: 'clusterconfigentry:edit' },\n              _react2.default.createElement(\n                _reactBootstrap.Button,\n                { bsStyle: 'primary', onClick: this._openModal, className: 'save-button-margin' },\n                'Update'\n              ),\n              _react2.default.createElement(\n                _reactBootstrap.Button,\n                { onClick: this._onCancel },\n                'Cancel'\n              )\n            ),\n            _react2.default.createElement(\n              _BootstrapModalForm2.default,\n              { ref: 'configModal',\n                title: 'Update Authentication Provider Configuration',\n                onSubmitForm: this._saveConfig,\n                onModalClose: this._resetConfig,\n                submitButtonText: 'Save' },\n              _react2.default.createElement(\n                'h3',\n                null,\n                'Order'\n              ),\n              _react2.default.createElement(\n                'p',\n                null,\n                'Use drag and drop to change the execution order of the authentication providers.'\n              ),\n              _react2.default.createElement(_common.SortableList, { items: this._sortableItems(), onMoveItem: this._updateSorting }),\n              _react2.default.createElement(\n                'h3',\n                null,\n                'Status'\n              ),\n              _react2.default.createElement(\n                'p',\n                null,\n                'Change the checkboxes to change the status of an authentication provider.'\n              ),\n              _react2.default.createElement(\n                _reactBootstrap.Table,\n                { striped: true, bordered: true, condensed: true, className: 'top-margin' },\n                _react2.default.createElement(\n                  'thead',\n                  null,\n                  _react2.default.createElement(\n                    'tr',\n                    null,\n                    _react2.default.createElement(\n                      'th',\n                      null,\n                      'Provider'\n                    ),\n                    _react2.default.createElement(\n                      'th',\n                      null,\n                      'Enabled'\n                    )\n                  )\n                ),\n                _react2.default.createElement(\n                  'tbody',\n                  null,\n                  this._statusForm()\n                )\n              ),\n              this._noActiveRealmWarning()\n            )\n          )\n        )\n      )\n    );\n  }\n});\n\nexports.default = AuthProvidersConfig;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1218:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reflux = __webpack_require__(1);\n\nvar _reflux2 = _interopRequireDefault(_reflux);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _reactRouterBootstrap = __webpack_require__(949);\n\nvar _Routes = __webpack_require__(75);\n\nvar _Routes2 = _interopRequireDefault(_Routes);\n\nvar _common = __webpack_require__(48);\n\nvar _plugin = __webpack_require__(258);\n\nvar _PermissionsMixin = __webpack_require__(165);\n\nvar _PermissionsMixin2 = _interopRequireDefault(_PermissionsMixin);\n\nvar _AuthProvidersConfig = __webpack_require__(1217);\n\nvar _AuthProvidersConfig2 = _interopRequireDefault(_AuthProvidersConfig);\n\nvar _ActionsProvider = __webpack_require__(7);\n\nvar _ActionsProvider2 = _interopRequireDefault(_ActionsProvider);\n\nvar _StoreProvider = __webpack_require__(18);\n\nvar _StoreProvider2 = _interopRequireDefault(_StoreProvider);\n\nvar _AuthenticationComponent = __webpack_require__(1493);\n\nvar _AuthenticationComponent2 = _interopRequireDefault(_AuthenticationComponent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AuthenticationActions = _ActionsProvider2.default.getActions('Authentication');\n\nvar AuthenticationStore = _StoreProvider2.default.getStore('Authentication');\nvar CurrentUserStore = _StoreProvider2.default.getStore('CurrentUser');\n\nvar AuthenticationComponent = _react2.default.createClass({\n  displayName: 'AuthenticationComponent',\n\n\n  propTypes: {\n    location: _react2.default.PropTypes.object.isRequired,\n    params: _react2.default.PropTypes.object.isRequired,\n    history: _react2.default.PropTypes.object.isRequired,\n    children: _react2.default.PropTypes.element\n  },\n\n  mixins: [_reflux2.default.connect(AuthenticationStore), _reflux2.default.connect(CurrentUserStore), _PermissionsMixin2.default],\n\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    AuthenticationActions.load();\n\n    _plugin.PluginStore.exports('authenticatorConfigurations').forEach(function (authConfig) {\n      _this.authenticatorConfigurations[authConfig.name] = authConfig;\n      // TODO load per authenticator config\n    });\n  },\n\n\n  // contains the 'authname' -> plugin descriptor\n  authenticatorConfigurations: {},\n\n  _pluginPane: function _pluginPane() {\n    var name = this.props.params.name;\n    var auth = this.authenticatorConfigurations[name];\n\n    if (auth) {\n      return _react2.default.createElement(auth.component, {\n        key: 'auth-configuration-' + name,\n        history: this.props.history\n      });\n    }\n    return _react2.default.createElement(\n      _reactBootstrap.Alert,\n      { bsStyle: 'danger' },\n      'Plugin component missing for authenticator ',\n      _react2.default.createElement(\n        'code',\n        null,\n        name\n      ),\n      ', this is an error.'\n    );\n  },\n  _onUpdateProviders: function _onUpdateProviders(config) {\n    return AuthenticationActions.update('providers', config);\n  },\n  _contentComponent: function _contentComponent() {\n    if (!this.state.authenticators) {\n      return _react2.default.createElement(_common.Spinner, null);\n    }\n    if (this.props.params.name === undefined) {\n      return _react2.default.createElement(_AuthProvidersConfig2.default, { config: this.state.authenticators,\n        descriptors: this.authenticatorConfigurations,\n        updateConfig: this._onUpdateProviders,\n        history: this.props.history });\n    }\n    return this._pluginPane();\n  },\n  render: function render() {\n    var _this2 = this;\n\n    var authenticators = [];\n    var auths = this.state.authenticators;\n    if (auths) {\n      // only show the entries if the user is permitted to change them, makes no sense otherwise\n      if (this.isPermitted(this.state.currentUser.permissions, ['authentication:edit'])) {\n        authenticators = auths.realm_order.map(function (name, idx) {\n          var auth = _this2.authenticatorConfigurations[name];\n          var title = (auth || { displayName: name }).displayName;\n          var numberedTitle = idx + 1 + '. ' + title;\n          return _react2.default.createElement(\n            _reactRouterBootstrap.LinkContainer,\n            { key: 'container-' + name, to: _Routes2.default.SYSTEM.AUTHENTICATION.PROVIDERS.provider(name) },\n            _react2.default.createElement(\n              _reactBootstrap.NavItem,\n              { key: name, title: numberedTitle },\n              numberedTitle\n            )\n          );\n        });\n\n        authenticators.unshift(_react2.default.createElement(\n          _reactBootstrap.NavItem,\n          { key: 'divider', disabled: true, title: 'Provider Settings', className: _AuthenticationComponent2.default.divider },\n          'Provider Settings'\n        ));\n        authenticators.unshift(_react2.default.createElement(\n          _reactRouterBootstrap.LinkContainer,\n          { key: 'container-settings', to: _Routes2.default.SYSTEM.AUTHENTICATION.PROVIDERS.CONFIG },\n          _react2.default.createElement(\n            _reactBootstrap.NavItem,\n            { key: 'settings', title: 'Configure Provider Order' },\n            'Configure Provider Order'\n          )\n        ));\n      }\n    } else {\n      authenticators = [_react2.default.createElement(\n        _reactBootstrap.NavItem,\n        { key: 'loading', disabled: true, title: 'Loading...' },\n        'Loading...'\n      )];\n    }\n\n    // add submenu items based on permissions\n    if (this.isPermitted(this.state.currentUser.permissions, ['roles:read'])) {\n      authenticators.unshift(_react2.default.createElement(\n        _reactRouterBootstrap.LinkContainer,\n        { key: 'roles', to: _Routes2.default.SYSTEM.AUTHENTICATION.ROLES },\n        _react2.default.createElement(\n          _reactBootstrap.NavItem,\n          { title: 'Roles' },\n          'Roles'\n        )\n      ));\n    }\n    if (this.isPermitted(this.state.currentUser.permissions, ['users:list'])) {\n      authenticators.unshift(_react2.default.createElement(\n        _reactRouterBootstrap.LinkContainer,\n        { key: 'users', to: _Routes2.default.SYSTEM.AUTHENTICATION.USERS.LIST },\n        _react2.default.createElement(\n          _reactBootstrap.NavItem,\n          { title: 'Users' },\n          'Users'\n        )\n      ));\n    }\n\n    if (authenticators.length === 0) {\n      // special case, this is a user editing their own profile\n      authenticators = [_react2.default.createElement(\n        _reactRouterBootstrap.LinkContainer,\n        { key: 'profile-edit', to: _Routes2.default.SYSTEM.AUTHENTICATION.USERS.edit(encodeURIComponent(this.state.currentUser.username)) },\n        _react2.default.createElement(\n          _reactBootstrap.NavItem,\n          { title: 'Edit User' },\n          'Edit User'\n        )\n      )];\n    }\n    var subnavigation = _react2.default.createElement(\n      _reactBootstrap.Nav,\n      { stacked: true, bsStyle: 'pills' },\n      authenticators\n    );\n\n    var contentComponent = _react2.default.Children.count(this.props.children) === 1 ? _react2.default.Children.only(this.props.children) : this._contentComponent();\n\n    return _react2.default.createElement(\n      _reactBootstrap.Row,\n      null,\n      _react2.default.createElement(\n        _reactBootstrap.Col,\n        { md: 2, className: _AuthenticationComponent2.default.subnavigation },\n        subnavigation\n      ),\n      _react2.default.createElement(\n        _reactBootstrap.Col,\n        { md: 10, className: _AuthenticationComponent2.default.contentpane },\n        contentComponent\n      )\n    );\n  }\n});\n\nexports.default = AuthenticationComponent;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1219:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _common = __webpack_require__(48);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _LdapComponent = __webpack_require__(1254);\n\nvar _LdapComponent2 = _interopRequireDefault(_LdapComponent);\n\nvar _LdapGroupsComponent = __webpack_require__(1255);\n\nvar _LdapGroupsComponent2 = _interopRequireDefault(_LdapGroupsComponent);\n\nvar _CombinedProvider = __webpack_require__(86);\n\nvar _CombinedProvider2 = _interopRequireDefault(_CombinedProvider);\n\nvar _Routes = __webpack_require__(75);\n\nvar _Routes2 = _interopRequireDefault(_Routes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _CombinedProvider$get = _CombinedProvider2.default.get('Ldap'),\n    LdapActions = _CombinedProvider$get.LdapActions;\n\nvar LegacyLdapConfig = _react2.default.createClass({\n  displayName: 'LegacyLdapConfig',\n\n  propTypes: {\n    history: _react.PropTypes.object.isRequired\n  },\n  getInitialState: function getInitialState() {\n    return {\n      showSettings: true\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    LdapActions.loadSettings();\n  },\n  _toggleButton: function _toggleButton() {\n    this.setState({ showSettings: !this.state.showSettings });\n  },\n  _onSettingsCancel: function _onSettingsCancel() {\n    this._toggleButton();\n  },\n  _onCancel: function _onCancel() {\n    this.props.history.pushState(null, _Routes2.default.SYSTEM.AUTHENTICATION.OVERVIEW);\n  },\n  render: function render() {\n    var toggleButtonText = this.state.showSettings ? 'LDAP Group Mapping' : 'LDAP Settings';\n    var activeComponent = this.state.showSettings ? _react2.default.createElement(_LdapComponent2.default, { onCancel: this._onCancel, onShowGroups: this._toggleButton }) : _react2.default.createElement(_LdapGroupsComponent2.default, { onCancel: this._onSettingsCancel, onShowConfig: this._toggleButton });\n\n    return _react2.default.createElement(\n      _common.DocumentTitle,\n      { title: 'LDAP Settings' },\n      _react2.default.createElement(\n        'span',\n        null,\n        _react2.default.createElement(\n          _common.PageHeader,\n          { title: 'LDAP Settings', subpage: true },\n          _react2.default.createElement(\n            'span',\n            null,\n            'This page is the only resource you need to set up the Graylog LDAP integration. You can test the connection to your LDAP server and even try to log in with an LDAP account of your choice right away.'\n          ),\n          null,\n          _react2.default.createElement(\n            'span',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Button,\n              { bsStyle: 'success', onClick: this._toggleButton },\n              toggleButtonText\n            )\n          )\n        ),\n        activeComponent\n      )\n    );\n  }\n});\n\nexports.default = LegacyLdapConfig;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1220:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _common = __webpack_require__(48);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MongoDbPasswordConfig = _react2.default.createClass({\n  displayName: 'MongoDbPasswordConfig',\n\n  propTypes: {\n    config: _react.PropTypes.object\n  },\n  render: function render() {\n    return _react2.default.createElement(\n      _common.DocumentTitle,\n      { title: 'Password Authenticator' },\n      _react2.default.createElement(\n        'span',\n        null,\n        _react2.default.createElement(\n          _common.PageHeader,\n          { title: 'Password Authenticator', subpage: true },\n          _react2.default.createElement(\n            'span',\n            null,\n            'This authenticator uses the password stored in MongoDB to grant access to users, it usually runs last, so that other authentication sources have priority.'\n          )\n        ),\n        _react2.default.createElement(\n          'span',\n          null,\n          'If you only rely on external authentication systems, such as LDAP or Active Directory, you can disable this authenticator. It currently has no configuration options.'\n        )\n      )\n    );\n  }\n});\n\nexports.default = MongoDbPasswordConfig;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1221:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _common = __webpack_require__(48);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MongoDbSessionConfig = function MongoDbSessionConfig() {\n  return _react2.default.createElement(\n    _common.DocumentTitle,\n    { title: 'Session Authenticator' },\n    _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        _common.PageHeader,\n        { title: 'Session Authenticator', subpage: true },\n        _react2.default.createElement(\n          'span',\n          null,\n          'This authenticator uses the session supplied from the web interface to grant access to logged in users, it usually runs first.'\n        )\n      ),\n      _react2.default.createElement(\n        'span',\n        null,\n        'Since sessions are necessary to let the web interface function it cannot be disabled.'\n      )\n    )\n  );\n};\n\nexports.default = MongoDbSessionConfig;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1222:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _common = __webpack_require__(48);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RootUserConfig = function RootUserConfig() {\n  return _react2.default.createElement(\n    _common.DocumentTitle,\n    { title: 'Admin User Authenticator' },\n    _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        _common.PageHeader,\n        { title: 'Admin User Authenticator', subpage: true },\n        _react2.default.createElement(\n          'span',\n          null,\n          'This authenticator grants access to the admin user specified in the configuration file.'\n        )\n      ),\n      _react2.default.createElement(\n        'span',\n        null,\n        'Currently the admin user authenticator cannot be configured outside of the configuration file. It can also not be disabled at the moment.'\n      )\n    )\n  );\n};\n\nexports.default = RootUserConfig;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1223:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _plugin = __webpack_require__(258);\n\nvar _MongoDbPasswordConfig = __webpack_require__(1220);\n\nvar _MongoDbPasswordConfig2 = _interopRequireDefault(_MongoDbPasswordConfig);\n\nvar _MongoDbSessionConfig = __webpack_require__(1221);\n\nvar _MongoDbSessionConfig2 = _interopRequireDefault(_MongoDbSessionConfig);\n\nvar _LegacyLdapConfig = __webpack_require__(1219);\n\nvar _LegacyLdapConfig2 = _interopRequireDefault(_LegacyLdapConfig);\n\nvar _RootUserConfig = __webpack_require__(1222);\n\nvar _RootUserConfig2 = _interopRequireDefault(_RootUserConfig);\n\nvar _AccessTokenConfig = __webpack_require__(1216);\n\nvar _AccessTokenConfig2 = _interopRequireDefault(_AccessTokenConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_plugin.PluginStore.register(new _plugin.PluginManifest({}, {\n  authenticatorConfigurations: [{\n    name: 'mongodb-password',\n    displayName: 'Passwords',\n    description: 'Graylog managed account passwords (from MongoDB)',\n    canBeDisabled: true,\n    component: _MongoDbPasswordConfig2.default\n  }, {\n    name: 'mongodb-session',\n    displayName: 'Sessions',\n    description: 'Established session authenticator',\n    canBeDisabled: false,\n    component: _MongoDbSessionConfig2.default\n  }, {\n    name: 'legacy-ldap',\n    displayName: 'LDAP/Active Directory',\n    description: 'Authenticates against external system and creates accounts in Graylog',\n    canBeDisabled: true,\n    component: _LegacyLdapConfig2.default\n  }, {\n    name: 'root-user',\n    displayName: 'Admin user',\n    description: 'Static account configured in the server configuration file',\n    canBeDisabled: false,\n    component: _RootUserConfig2.default\n  }, {\n    name: 'access-token',\n    displayName: 'API Tokens',\n    description: 'Per user tokens which do not establish sessions',\n    canBeDisabled: true,\n    component: _AccessTokenConfig2.default\n  }]\n}));\n\n/***/ }),\n\n/***/ 1254:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reflux = __webpack_require__(1);\n\nvar _reflux2 = _interopRequireDefault(_reflux);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _urijs = __webpack_require__(88);\n\nvar _urijs2 = _interopRequireDefault(_urijs);\n\nvar _javascriptNaturalSort = __webpack_require__(951);\n\nvar _javascriptNaturalSort2 = _interopRequireDefault(_javascriptNaturalSort);\n\nvar _bootstrap = __webpack_require__(43);\n\nvar _common = __webpack_require__(48);\n\nvar _ObjectUtils = __webpack_require__(259);\n\nvar _ObjectUtils2 = _interopRequireDefault(_ObjectUtils);\n\nvar _TestLdapConnection = __webpack_require__(1256);\n\nvar _TestLdapConnection2 = _interopRequireDefault(_TestLdapConnection);\n\nvar _TestLdapLogin = __webpack_require__(1257);\n\nvar _TestLdapLogin2 = _interopRequireDefault(_TestLdapLogin);\n\nvar _StoreProvider = __webpack_require__(18);\n\nvar _StoreProvider2 = _interopRequireDefault(_StoreProvider);\n\nvar _ActionsProvider = __webpack_require__(7);\n\nvar _ActionsProvider2 = _interopRequireDefault(_ActionsProvider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RolesStore = _StoreProvider2.default.getStore('Roles');\nvar LdapStore = _StoreProvider2.default.getStore('Ldap');\n\nvar LdapActions = _ActionsProvider2.default.getActions('Ldap');\n\nvar HelperText = {\n  activeDirectory: {\n    SYSTEM_USERNAME: _react2.default.createElement(\n      'span',\n      null,\n      'The username for the initial connection to the Active Directory server, e.g. ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'ldapbind@some.domain'\n      ),\n      '.',\n      _react2.default.createElement('br', null),\n      'This needs to match the ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'userPrincipalName'\n      ),\n      ' of that user.'\n    ),\n    SYSTEM_PASSWORD: 'The password for the initial connection to the Active Directory server.',\n    SEARCH_BASE: _react2.default.createElement(\n      'span',\n      null,\n      'The base tree to limit the Active Directory search query to, e.g. ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'cn=users,dc=example,dc=com'\n      ),\n      '.'\n    ),\n    SEARCH_PATTERN: _react2.default.createElement(\n      'span',\n      null,\n      'For example ',\n      _react2.default.createElement(\n        'code',\n        { className: 'text-nowrap' },\n        '(&(objectClass=user)(sAMAccountName={0}))'\n      ),\n      '.',\n      ' ',\n      'The string ',\n      _react2.default.createElement(\n        'code',\n        null,\n        '{0}'\n      ),\n      ' will be replaced by the entered username.'\n    ),\n    DISPLAY_NAME: _react2.default.createElement(\n      'span',\n      null,\n      'Which Active Directory attribute to use for the full name of the user in Graylog, e.g. ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'displayName'\n      ),\n      '.',\n      _react2.default.createElement('br', null),\n      'Try to load a test user using the form below, if you are unsure which attribute to use.'\n    ),\n    GROUP_SEARCH_BASE: _react2.default.createElement(\n      'span',\n      null,\n      'The base tree to limit the Active Directory group search query to, e.g. ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'cn=users,dc=example,dc=com'\n      ),\n      '.'\n    ),\n    GROUP_PATTERN: _react2.default.createElement(\n      'span',\n      null,\n      'The search pattern used to find groups in Active Directory for mapping to Graylog roles, e.g.',\n      ' ',\n      _react2.default.createElement(\n        'code',\n        { className: 'text-nowrap' },\n        '(objectClass=group)'\n      ),\n      ' or',\n      ' ',\n      _react2.default.createElement(\n        'code',\n        { className: 'text-nowrap' },\n        '(&(objectClass=group)(cn=graylog*))'\n      ),\n      '.'\n    ),\n    GROUP_ID: _react2.default.createElement(\n      'span',\n      null,\n      'Which Active Directory attribute to use for the full name of the group, usually ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'cn'\n      ),\n      '.'\n    ),\n    defaultGroup: function defaultGroup(onClickHandler) {\n      return _react2.default.createElement(\n        'span',\n        null,\n        'The default Graylog role determines whether a user created via Active Directory can access the entire system, or has limited access.',\n        _react2.default.createElement('br', null),\n        'You can assign additional permissions by',\n        ' ',\n        _react2.default.createElement(\n          'a',\n          { href: '#', onClick: onClickHandler },\n          'mapping Active Directory groups to Graylog roles'\n        ),\n        ',',\n        ' ',\n        'or you can assign additional Graylog roles to Active Directory users below.'\n      );\n    },\n    ADDITIONAL_GROUPS: 'Choose the additional roles each Active Directory user will have by default, leave it empty if you want to map Active Directory groups to Graylog roles.'\n  },\n\n  ldap: {\n    SYSTEM_USERNAME: _react2.default.createElement(\n      'span',\n      null,\n      'The username for the initial connection to the LDAP server, e.g.',\n      ' ',\n      _react2.default.createElement(\n        'code',\n        { className: 'text-nowrap' },\n        'uid=admin,ou=system'\n      ),\n      ', this might be optional depending on your LDAP server.'\n    ),\n    SYSTEM_PASSWORD: 'The password for the initial connection to the LDAP server.',\n    SEARCH_BASE: _react2.default.createElement(\n      'span',\n      null,\n      'The base tree to limit the LDAP search query to, e.g. ',\n      _react2.default.createElement(\n        'code',\n        {\n          className: 'text-nowrap' },\n        'cn=users,dc=example,dc=com'\n      ),\n      '.'\n    ),\n    SEARCH_PATTERN: _react2.default.createElement(\n      'span',\n      null,\n      'For example ',\n      _react2.default.createElement(\n        'code',\n        { className: 'text-nowrap' },\n        '(&(objectClass=inetOrgPerson)(uid={0}))'\n      ),\n      '.',\n      ' ',\n      'The string ',\n      _react2.default.createElement(\n        'code',\n        null,\n        '{0}'\n      ),\n      ' will be replaced by the entered username.'\n    ),\n    DISPLAY_NAME: _react2.default.createElement(\n      'span',\n      null,\n      'Which LDAP attribute to use for the full name of the user in Graylog, e.g. ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'cn'\n      ),\n      '.',\n      _react2.default.createElement('br', null),\n      'Try to load a test user using the form below, if you are unsure which attribute to use.'\n    ),\n    GROUP_SEARCH_BASE: _react2.default.createElement(\n      'span',\n      null,\n      'The base tree to limit the LDAP group search query to, e.g. ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'cn=users,dc=example,dc=com'\n      ),\n      '.'\n    ),\n    GROUP_PATTERN: _react2.default.createElement(\n      'span',\n      null,\n      'The search pattern used to find groups in LDAP for mapping to Graylog roles, e.g.',\n      ' ',\n      _react2.default.createElement(\n        'code',\n        null,\n        '(objectClass=groupOfNames)'\n      ),\n      ' or',\n      ' ',\n      _react2.default.createElement(\n        'code',\n        { className: 'text-nowrap' },\n        '(&(objectClass=groupOfNames)(cn=graylog*))'\n      ),\n      '.'\n    ),\n    GROUP_ID: _react2.default.createElement(\n      'span',\n      null,\n      'Which LDAP attribute to use for the full name of the group, usually ',\n      _react2.default.createElement(\n        'code',\n        null,\n        'cn'\n      ),\n      '.'\n    ),\n    defaultGroup: function defaultGroup(onClickHandler) {\n      return _react2.default.createElement(\n        'span',\n        null,\n        'The default Graylog role determines whether a user created via LDAP can access the entire system, or has limited access.',\n        _react2.default.createElement('br', null),\n        'You can assign additional permissions by',\n        ' ',\n        _react2.default.createElement(\n          'a',\n          { href: '#', onClick: onClickHandler },\n          'mapping LDAP groups to Graylog roles'\n        ),\n        ',',\n        ' ',\n        'or you can assign additional Graylog roles to LDAP users below.'\n      );\n    },\n    ADDITIONAL_GROUPS: 'Choose the additional roles each LDAP user will have by default, leave it empty if you want to map LDAP groups to Graylog roles.'\n  }\n};\n\nvar LdapComponent = _react2.default.createClass({\n  displayName: 'LdapComponent',\n\n  mixins: [_reflux2.default.listenTo(LdapStore, '_onLdapSettingsChange', '_onLdapSettingsChange')],\n\n  propTypes: {\n    onCancel: _react2.default.PropTypes.func.isRequired,\n    onShowGroups: _react2.default.PropTypes.func.isRequired\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      ldapSettings: undefined,\n      ldapUri: undefined,\n      roles: undefined\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    RolesStore.loadRoles().then(function (roles) {\n      _this.setState({ roles: _this._formatAdditionalRoles(roles) });\n    });\n  },\n  _formatAdditionalRoles: function _formatAdditionalRoles(roles) {\n    return roles.filter(function (r) {\n      return !(r.name.toLowerCase() === 'reader' || r.name.toLowerCase() === 'admin');\n    }).sort(function (r1, r2) {\n      return (0, _javascriptNaturalSort2.default)(r1.name.toLowerCase(), r2.name.toLowerCase());\n    }).map(function (r) {\n      return { label: r.name, value: r.name };\n    });\n  },\n  _onLdapSettingsChange: function _onLdapSettingsChange(state) {\n    if (!state.ldapSettings) {\n      return;\n    }\n\n    // Clone settings object, so we don't the store reference\n    var settings = _ObjectUtils2.default.clone(state.ldapSettings);\n    var ldapUri = new _urijs2.default(settings.ldap_uri);\n    this.setState({ ldapSettings: settings, ldapUri: ldapUri });\n  },\n  _isLoading: function _isLoading() {\n    return !this.state.ldapSettings || !this.state.roles;\n  },\n  _bindChecked: function _bindChecked(ev, value) {\n    this._setSetting(ev.target.name, typeof value === 'undefined' ? ev.target.checked : value);\n  },\n  _bindValue: function _bindValue(ev) {\n    this._setSetting(ev.target.name, ev.target.value);\n  },\n  _updateSsl: function _updateSsl(ev) {\n    this._setUriScheme(ev.target.checked ? 'ldaps' : 'ldap');\n  },\n  _setSetting: function _setSetting(attribute, value) {\n    var newState = {};\n\n    var formattedValue = value;\n    // Convert URI object into string to store it in the state\n    if (attribute === 'ldap_uri' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      newState.ldapUri = value;\n      formattedValue = value.toString();\n    }\n\n    // Clone state to not modify it directly\n    var settings = _ObjectUtils2.default.clone(this.state.ldapSettings);\n    settings[attribute] = formattedValue;\n    newState.ldapSettings = settings;\n    newState.serverConnectionStatus = {};\n    this.setState(newState);\n  },\n  _setUriScheme: function _setUriScheme(scheme) {\n    var ldapUri = this.state.ldapUri.clone();\n    ldapUri.scheme(scheme);\n    this._setSetting('ldap_uri', ldapUri);\n  },\n  _uriScheme: function _uriScheme() {\n    return this.state.ldapUri.scheme() + '://';\n  },\n  _setUriHost: function _setUriHost(host) {\n    var ldapUri = this.state.ldapUri.clone();\n    ldapUri.hostname(host);\n    this._setSetting('ldap_uri', ldapUri);\n  },\n  _uriHost: function _uriHost() {\n    return this.state.ldapUri.hostname();\n  },\n  _setUriPort: function _setUriPort(port) {\n    var ldapUri = this.state.ldapUri.clone();\n    ldapUri.port(port);\n    this._setSetting('ldap_uri', ldapUri);\n  },\n  _uriPort: function _uriPort() {\n    return this.state.ldapUri.port();\n  },\n  _setAdditionalDefaultGroups: function _setAdditionalDefaultGroups(rolesString) {\n    // only keep non-empty entries\n    var roles = rolesString.split(',').filter(function (v) {\n      return v !== '';\n    });\n    this._setSetting('additional_default_groups', roles);\n  },\n  _saveSettings: function _saveSettings(event) {\n    event.preventDefault();\n    LdapActions.update(this.state.ldapSettings);\n  },\n  _onShowGroups: function _onShowGroups(event) {\n    event.preventDefault();\n    this.props.onShowGroups();\n  },\n  render: function render() {\n    var _this2 = this;\n\n    if (this._isLoading()) {\n      return _react2.default.createElement(_common.Spinner, null);\n    }\n\n    var isAD = this.state.ldapSettings.active_directory;\n    var disabled = !this.state.ldapSettings.enabled;\n    var help = isAD ? HelperText.activeDirectory : HelperText.ldap;\n\n    var rolesOptions = this.state.roles;\n\n    return _react2.default.createElement(\n      _reactBootstrap.Row,\n      null,\n      _react2.default.createElement(\n        _reactBootstrap.Col,\n        { lg: 8 },\n        _react2.default.createElement(\n          'form',\n          { id: 'ldap-settings-form', className: 'form-horizontal', onSubmit: this._saveSettings },\n          _react2.default.createElement(_bootstrap.Input, { type: 'checkbox', label: 'Enable LDAP',\n            help: 'User accounts will be taken from LDAP/Active Directory, the administrator account will still be available.',\n            wrapperClassName: 'col-sm-offset-3 col-sm-9',\n            name: 'enabled',\n            checked: this.state.ldapSettings.enabled,\n            onChange: this._bindChecked }),\n          _react2.default.createElement(\n            'fieldset',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              { className: 'row-sm' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 12 },\n                _react2.default.createElement(\n                  'legend',\n                  null,\n                  '1. Server configuration'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              _bootstrap.Input,\n              { id: 'active_directory', labelClassName: 'col-sm-3',\n                wrapperClassName: 'col-sm-9', label: 'Server Type' },\n              _react2.default.createElement(\n                'label',\n                { className: 'radio-inline' },\n                _react2.default.createElement('input', { type: 'radio', name: 'active_directory',\n                  checked: !isAD, disabled: disabled,\n                  onChange: function onChange(ev) {\n                    return _this2._bindChecked(ev, false);\n                  } }),\n                'LDAP'\n              ),\n              _react2.default.createElement(\n                'label',\n                { className: 'radio-inline' },\n                _react2.default.createElement('input', { type: 'radio', name: 'active_directory',\n                  checked: isAD, disabled: disabled,\n                  onChange: function onChange(ev) {\n                    return _this2._bindChecked(ev, true);\n                  } }),\n                'Active Directory'\n              )\n            ),\n            _react2.default.createElement(\n              _bootstrap.Input,\n              { id: 'ldap-uri-host', labelClassName: 'col-sm-3',\n                wrapperClassName: 'col-sm-9', label: 'Server Address' },\n              _react2.default.createElement(\n                'div',\n                { className: 'input-group' },\n                _react2.default.createElement(\n                  'span',\n                  { className: 'input-group-addon' },\n                  this._uriScheme()\n                ),\n                _react2.default.createElement('input', { type: 'text', className: 'form-control', id: 'ldap-uri-host', value: this._uriHost(),\n                  placeholder: 'Hostname', required: true, onChange: function onChange(ev) {\n                    return _this2._setUriHost(ev.target.value);\n                  },\n                  disabled: disabled }),\n                _react2.default.createElement(\n                  'span',\n                  { className: 'input-group-addon input-group-separator' },\n                  ':'\n                ),\n                _react2.default.createElement('input', { type: 'number', className: 'form-control', id: 'ldap-uri-port', value: this._uriPort(), min: '1',\n                  max: '65535', placeholder: 'Port',\n                  required: true, style: { width: 120 }, onChange: function onChange(ev) {\n                    return _this2._setUriPort(ev.target.value);\n                  },\n                  disabled: disabled })\n              ),\n              _react2.default.createElement(\n                'label',\n                { className: 'checkbox-inline' },\n                _react2.default.createElement('input', { type: 'checkbox', name: 'ssl', checked: this.state.ldapUri.scheme() === 'ldaps',\n                  onChange: this._updateSsl,\n                  disabled: disabled }),\n                ' SSL'\n              ),\n              _react2.default.createElement(\n                'label',\n                { className: 'checkbox-inline' },\n                _react2.default.createElement('input', { type: 'checkbox', name: 'use_start_tls', value: 'true', id: 'ldap-uri-starttls',\n                  checked: this.state.ldapSettings.use_start_tls, onChange: this._bindChecked,\n                  disabled: disabled }),\n                ' StartTLS'\n              ),\n              _react2.default.createElement(\n                'label',\n                { className: 'checkbox-inline' },\n                _react2.default.createElement('input', { type: 'checkbox', name: 'trust_all_certificates', value: 'true', id: 'trust-all-certificates',\n                  checked: this.state.ldapSettings.trust_all_certificates, onChange: this._bindChecked,\n                  disabled: disabled }),\n                ' Allow self-signed certificates'\n              )\n            ),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'system_username', name: 'system_username', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'System User DN', label: 'System Username',\n              value: this.state.ldapSettings.system_username, help: help.SYSTEM_USERNAME,\n              onChange: this._bindValue, disabled: disabled }),\n            _react2.default.createElement(_bootstrap.Input, { type: 'password', id: 'system_password', name: 'system_password', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'System Password', label: 'System Password',\n              value: this.state.ldapSettings.system_password, help: help.SYSTEM_PASSWORD,\n              onChange: this._bindValue, disabled: disabled })\n          ),\n          _react2.default.createElement(\n            'fieldset',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              { className: 'row-sm' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 12 },\n                _react2.default.createElement(\n                  'legend',\n                  null,\n                  '2. Connection Test'\n                )\n              )\n            ),\n            _react2.default.createElement(_TestLdapConnection2.default, { ldapSettings: this.state.ldapSettings, ldapUri: this.state.ldapUri, disabled: disabled })\n          ),\n          _react2.default.createElement(\n            'fieldset',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              { className: 'row-sm' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 12 },\n                _react2.default.createElement(\n                  'legend',\n                  null,\n                  '3. User mapping'\n                )\n              )\n            ),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'search_base', name: 'search_base', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'Search Base', label: 'Search Base DN',\n              value: this.state.ldapSettings.search_base, help: help.SEARCH_BASE,\n              onChange: this._bindValue, disabled: disabled, required: true }),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'search_pattern', name: 'search_pattern', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'Search Pattern', label: 'User Search Pattern',\n              value: this.state.ldapSettings.search_pattern, help: help.SEARCH_PATTERN,\n              onChange: this._bindValue, disabled: disabled, required: true }),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'display_name_attribute', name: 'display_name_attribute', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'Display Name Attribute', label: 'Display Name attribute',\n              value: this.state.ldapSettings.display_name_attribute, help: help.DISPLAY_NAME,\n              onChange: this._bindValue, disabled: disabled, required: true })\n          ),\n          _react2.default.createElement(\n            'fieldset',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              { className: 'row-sm' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 12 },\n                _react2.default.createElement(\n                  'legend',\n                  null,\n                  '4. Group Mapping ',\n                  _react2.default.createElement(\n                    'small',\n                    null,\n                    '(optional)'\n                  )\n                )\n              )\n            ),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'group_search_base', name: 'group_search_base', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'Group Search Base', label: 'Group Search Base DN',\n              value: this.state.ldapSettings.group_search_base, help: help.GROUP_SEARCH_BASE,\n              onChange: this._bindValue, disabled: disabled }),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'group_search_pattern', name: 'group_search_pattern', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'Group Search Pattern', label: 'Group Search Pattern',\n              value: this.state.ldapSettings.group_search_pattern, help: help.GROUP_PATTERN,\n              onChange: this._bindValue, disabled: disabled }),\n            _react2.default.createElement(_bootstrap.Input, { type: 'text', id: 'group_id_attribute', name: 'group_id_attribute', labelClassName: 'col-sm-3',\n              wrapperClassName: 'col-sm-9', placeholder: 'Group Id Attribute', label: 'Group Name Attribute',\n              value: this.state.ldapSettings.group_id_attribute, help: help.GROUP_ID,\n              onChange: this._bindValue, disabled: disabled }),\n            _react2.default.createElement(\n              _bootstrap.Input,\n              { id: 'default_group', labelClassName: 'col-sm-3',\n                wrapperClassName: 'col-sm-9', label: 'Default User Role',\n                help: help.defaultGroup(this._onShowGroups) },\n              _react2.default.createElement(\n                _reactBootstrap.Row,\n                null,\n                _react2.default.createElement(\n                  _reactBootstrap.Col,\n                  { sm: 4 },\n                  _react2.default.createElement(\n                    'select',\n                    { id: 'default_group', name: 'default_group', className: 'form-control', required: true,\n                      value: this.state.ldapSettings.default_group.toLowerCase(), disabled: disabled,\n                      onChange: function onChange(ev) {\n                        return _this2._setSetting('default_group', ev.target.value);\n                      } },\n                    _react2.default.createElement(\n                      'option',\n                      { value: 'reader' },\n                      'Reader - basic access'\n                    ),\n                    _react2.default.createElement(\n                      'option',\n                      { value: 'admin' },\n                      'Administrator - complete access'\n                    )\n                  )\n                )\n              )\n            ),\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              null,\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 9, smOffset: 3 },\n                _react2.default.createElement(\n                  _reactBootstrap.Panel,\n                  { bsStyle: 'info' },\n                  'Changing the static role assignment will only affect to new users created via LDAP/Active Directory!',\n                  _react2.default.createElement('br', null),\n                  'Existing user accounts will be updated on their next login, or if you edit their roles manually.'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              _bootstrap.Input,\n              { id: 'additional_default_groups', labelClassName: 'col-sm-3',\n                wrapperClassName: 'col-sm-9', label: 'Additional Default Roles',\n                help: help.ADDITIONAL_GROUPS },\n              _react2.default.createElement(_common.MultiSelect, {\n                ref: 'select',\n                options: rolesOptions,\n                disabled: disabled,\n                value: this.state.ldapSettings.additional_default_groups,\n                onChange: function onChange(roles) {\n                  return _this2._setAdditionalDefaultGroups(roles);\n                },\n                placeholder: 'Choose additional roles...'\n              })\n            ),\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              null,\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 9, smOffset: 3 },\n                _react2.default.createElement(\n                  _reactBootstrap.Panel,\n                  { bsStyle: 'info' },\n                  'Changing the static role assignment will only affect to new users created via LDAP/Active Directory!',\n                  _react2.default.createElement('br', null),\n                  'Existing user accounts will be updated on their next login, or if you edit their roles manually.'\n                )\n              )\n            )\n          ),\n          _react2.default.createElement(\n            'fieldset',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              { className: 'row-sm' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 12 },\n                _react2.default.createElement(\n                  'legend',\n                  null,\n                  '5. Login test'\n                )\n              )\n            ),\n            _react2.default.createElement(_TestLdapLogin2.default, { ldapSettings: this.state.ldapSettings, disabled: disabled })\n          ),\n          _react2.default.createElement(\n            'fieldset',\n            null,\n            _react2.default.createElement(\n              _reactBootstrap.Row,\n              { className: 'row-sm' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 12 },\n                _react2.default.createElement(\n                  'legend',\n                  null,\n                  '6. Store settings'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              'div',\n              { className: 'form-group' },\n              _react2.default.createElement(\n                _reactBootstrap.Col,\n                { sm: 9, smOffset: 3 },\n                _react2.default.createElement(\n                  _reactBootstrap.Button,\n                  { type: 'submit', bsStyle: 'primary', className: 'save-button-margin' },\n                  'Save LDAP settings'\n                ),\n                _react2.default.createElement(\n                  _reactBootstrap.Button,\n                  { onClick: this.props.onCancel },\n                  'Cancel'\n                )\n              )\n            )\n          )\n        )\n      )\n    );\n  }\n});\n\nexports.default = LdapComponent;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1255:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _immutable = __webpack_require__(55);\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _javascriptNaturalSort = __webpack_require__(951);\n\nvar _javascriptNaturalSort2 = _interopRequireDefault(_javascriptNaturalSort);\n\nvar _bootstrap = __webpack_require__(43);\n\nvar _common = __webpack_require__(48);\n\nvar _ActionsProvider = __webpack_require__(7);\n\nvar _ActionsProvider2 = _interopRequireDefault(_ActionsProvider);\n\nvar _StoreProvider = __webpack_require__(18);\n\nvar _StoreProvider2 = _interopRequireDefault(_StoreProvider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LdapGroupsActions = _ActionsProvider2.default.getActions('LdapGroups');\n\nvar RolesStore = _StoreProvider2.default.getStore('Roles');\nvar LdapGroupsStore = _StoreProvider2.default.getStore('LdapGroups');\n\nvar LdapGroupsComponent = _react2.default.createClass({\n  displayName: 'LdapGroupsComponent',\n\n  propTypes: {\n    onCancel: _react2.default.PropTypes.func.isRequired,\n    onShowConfig: _react2.default.PropTypes.func.isRequired\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      groups: _immutable2.default.Set.of(),\n      roles: _immutable2.default.Set.of(),\n      mapping: _immutable2.default.Map(),\n      groupsErrorMessage: null\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    LdapGroupsActions.loadMapping.triggerPromise().then(function (mapping) {\n      return _this.setState({ mapping: _immutable2.default.Map(mapping) });\n    });\n    LdapGroupsActions.loadGroups.triggerPromise().then(function (groups) {\n      return _this.setState({ groups: _immutable2.default.Set(groups) });\n    }, function (error) {\n      if (error.additional.status !== 400) {\n        _this.setState({ groupsErrorMessage: error });\n      }\n    });\n    RolesStore.loadRoles().then(function (roles) {\n      return _this.setState({ roles: _immutable2.default.Set(roles) });\n    });\n  },\n  _updateMapping: function _updateMapping(event) {\n    var role = event.target.value;\n    var group = event.target.getAttribute('data-group');\n    if (role === '') {\n      this.setState({ mapping: this.state.mapping.delete(group) });\n    } else {\n      this.setState({ mapping: this.state.mapping.set(group, role) });\n    }\n  },\n  _saveMapping: function _saveMapping(event) {\n    event.preventDefault();\n    LdapGroupsActions.saveMapping(this.state.mapping.toJS());\n  },\n  _onShowConfig: function _onShowConfig(event) {\n    event.preventDefault();\n    this.props.onShowConfig();\n  },\n  _isLoading: function _isLoading() {\n    return !(this.state.mapping && this.state.groups && this.state.roles);\n  },\n  render: function render() {\n    var _this2 = this;\n\n    if (this._isLoading()) {\n      return _react2.default.createElement(_common.Spinner, null);\n    }\n\n    if (this.state.groupsErrorMessage) {\n      return _react2.default.createElement(\n        _reactBootstrap.Panel,\n        { header: 'Error: Unable to load LDAP groups', bsStyle: 'danger' },\n        'The error message was:',\n        _react2.default.createElement('br', null),\n        this.state.groupsErrorMessage.message\n      );\n    }\n\n    _javascriptNaturalSort2.default.insensitive = true; // sigh\n\n    var options = this.state.roles.sort(_javascriptNaturalSort2.default).map(function (role) {\n      return _react2.default.createElement(\n        'option',\n        { key: role.name, value: role.name },\n        role.name\n      );\n    });\n\n    var content = this.state.groups.sort(_javascriptNaturalSort2.default).map(function (group) {\n      return _react2.default.createElement(\n        'li',\n        { key: group },\n        _react2.default.createElement(\n          _bootstrap.Input,\n          { label: group, 'data-group': group, type: 'select', value: _this2.state.mapping.get(group, ''),\n            onChange: _this2._updateMapping, labelClassName: 'col-sm-2', wrapperClassName: 'col-sm-5' },\n          _react2.default.createElement(\n            'option',\n            { value: '' },\n            'None'\n          ),\n          options\n        )\n      );\n    });\n\n    _javascriptNaturalSort2.default.insensitive = false; // sigh 2\n\n    if (content.size === 0) {\n      return _react2.default.createElement(\n        'p',\n        null,\n        'No LDAP/Active Directory groups found. Please verify that your',\n        ' ',\n        _react2.default.createElement(\n          'a',\n          { href: '#', onClick: this._onShowConfig },\n          'LDAP group mapping'\n        ),\n        ' ',\n        'settings are correct.'\n      );\n    }\n    return _react2.default.createElement(\n      'form',\n      { className: 'form-horizontal', onSubmit: this._saveMapping },\n      _react2.default.createElement(\n        _reactBootstrap.Row,\n        null,\n        _react2.default.createElement(\n          _reactBootstrap.Col,\n          { md: 12 },\n          _react2.default.createElement(\n            'ul',\n            { style: { padding: 0 } },\n            content\n          )\n        ),\n        _react2.default.createElement(\n          _reactBootstrap.Col,\n          { md: 10, mdPush: 2 },\n          _react2.default.createElement(\n            _reactBootstrap.Button,\n            { type: 'submit', bsStyle: 'primary', className: 'save-button-margin' },\n            'Save'\n          ),\n          _react2.default.createElement(\n            _reactBootstrap.Button,\n            { onClick: this.props.onCancel },\n            'Cancel'\n          )\n        )\n      )\n    );\n  }\n});\n\nexports.default = LdapGroupsComponent;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1256:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _ActionsProvider = __webpack_require__(7);\n\nvar _ActionsProvider2 = _interopRequireDefault(_ActionsProvider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LdapActions = _ActionsProvider2.default.getActions('Ldap');\n\nvar TestLdapConnection = _react2.default.createClass({\n  displayName: 'TestLdapConnection',\n\n  propTypes: {\n    ldapSettings: _react.PropTypes.object.isRequired,\n    ldapUri: _react.PropTypes.object.isRequired,\n    disabled: _react.PropTypes.bool\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      serverConnectionStatus: {}\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // Reset connection status if ldapSettings changed\n    if (JSON.stringify(this.props.ldapSettings) !== JSON.stringify(nextProps.ldapSettings)) {\n      this.setState({ serverConnectionStatus: {} });\n    }\n  },\n  _testServerConnection: function _testServerConnection() {\n    var _this = this;\n\n    LdapActions.testServerConnection.triggerPromise(this.props.ldapSettings).then(function (result) {\n      if (result.connected) {\n        _this.setState({ serverConnectionStatus: { loading: false, success: true } });\n      } else {\n        _this.setState({ serverConnectionStatus: { loading: false, error: result.exception } });\n      }\n    }, function () {\n      _this.setState({\n        serverConnectionStatus: {\n          loading: false,\n          error: 'Unable to check connection, please try again.'\n        }\n      });\n    });\n\n    this.setState({ serverConnectionStatus: { loading: true } });\n  },\n  _getServerConnectionStyle: function _getServerConnectionStyle() {\n    if (this.state.serverConnectionStatus.success) {\n      return 'success';\n    }\n    if (this.state.serverConnectionStatus.error) {\n      return 'danger';\n    }\n\n    return 'info';\n  },\n  render: function render() {\n    var serverConnectionStatus = this.state.serverConnectionStatus;\n    var isDisabled = this.props.disabled || this.props.ldapUri.hostname() === '' || serverConnectionStatus.loading;\n\n    var serverConnectionResult = void 0;\n    if (serverConnectionStatus.error) {\n      serverConnectionResult = _react2.default.createElement(\n        _reactBootstrap.Alert,\n        { bsStyle: 'danger' },\n        serverConnectionStatus.error\n      );\n    }\n    if (serverConnectionStatus.success) {\n      serverConnectionResult = _react2.default.createElement(\n        _reactBootstrap.Alert,\n        { bsStyle: 'success' },\n        'Connection to server was successful'\n      );\n    }\n\n    return _react2.default.createElement(\n      'div',\n      { className: 'form-group' },\n      _react2.default.createElement(\n        _reactBootstrap.Row,\n        null,\n        _react2.default.createElement(\n          _reactBootstrap.Col,\n          { sm: 9, smOffset: 3 },\n          _react2.default.createElement(\n            _reactBootstrap.Button,\n            { id: 'ldap-test-connection', bsStyle: this._getServerConnectionStyle(),\n              disabled: isDisabled,\n              onClick: this._testServerConnection },\n            serverConnectionStatus.loading ? 'Testing...' : 'Test Server Connection'\n          ),\n          _react2.default.createElement(\n            'span',\n            {\n              className: 'help-block' },\n            'Performs a background connection check with the address and credentials above.'\n          ),\n          serverConnectionResult\n        )\n      )\n    );\n  }\n});\n\nexports.default = TestLdapConnection;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1257:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _bootstrap = __webpack_require__(43);\n\nvar _ObjectUtils = __webpack_require__(259);\n\nvar _ObjectUtils2 = _interopRequireDefault(_ObjectUtils);\n\nvar _ActionsProvider = __webpack_require__(7);\n\nvar _ActionsProvider2 = _interopRequireDefault(_ActionsProvider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LdapActions = _ActionsProvider2.default.getActions('Ldap');\n\nvar TestLdapLogin = _react2.default.createClass({\n  displayName: 'TestLdapLogin',\n\n  propTypes: {\n    ldapSettings: _react.PropTypes.object.isRequired,\n    disabled: _react.PropTypes.bool\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      loginUser: '',\n      loginPassword: '',\n      loginStatus: {}\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.style.use();\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // Reset login status if ldapSettings changed\n    if (JSON.stringify(this.props.ldapSettings) !== JSON.stringify(nextProps.ldapSettings)) {\n      this.setState({ loginStatus: {} });\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.style.unuse();\n  },\n\n\n  style: __webpack_require__(1500),\n\n  _changeLoginForm: function _changeLoginForm(event) {\n    var newState = {};\n    var key = event.target.name === 'test_login_username' ? 'loginUser' : 'loginPassword';\n    newState[key] = event.target.value;\n    newState.loginStatus = {};\n    this.setState(newState);\n  },\n  _disableSubmitOnEnter: function _disableSubmitOnEnter(event) {\n    if (event.key && event.key === 'Enter') {\n      event.preventDefault();\n    }\n  },\n  _testLogin: function _testLogin() {\n    var _this = this;\n\n    LdapActions.testLogin.triggerPromise(this.props.ldapSettings, this.state.loginUser, this.state.loginPassword).then(function (result) {\n      if (result.connected && (result.login_authenticated || !_ObjectUtils2.default.isEmpty(result.entry))) {\n        _this.setState({ loginStatus: { loading: false, success: true, result: result } });\n      } else {\n        _this.setState({ loginStatus: { loading: false, error: true, result: result } });\n      }\n    }, function () {\n      _this.setState({\n        loginStatus: {\n          loading: false,\n          error: true,\n          result: {\n            exception: 'Unable to test login, please try again.'\n          }\n        }\n      });\n    });\n\n    this.setState({ loginStatus: { loading: true } });\n  },\n  _loginTestButtonStyle: function _loginTestButtonStyle() {\n    if (this.state.loginStatus.success) {\n      return 'success';\n    }\n    if (this.state.loginStatus.error) {\n      return 'danger';\n    }\n\n    return 'info';\n  },\n  _formatLoginStatus: function _formatLoginStatus(loginStatus) {\n    // Don't show any status if login didn't complete\n    if (!loginStatus.error && !loginStatus.success) {\n      return null;\n    }\n\n    var title = 'Connection ' + (loginStatus.error ? 'failed' : 'successful');\n    var style = loginStatus.error ? 'danger' : 'success';\n\n    var userFound = void 0;\n    if (_ObjectUtils2.default.isEmpty(loginStatus.result.entry)) {\n      userFound = _react2.default.createElement('i', { className: 'fa fa-times ldap-failure' });\n    } else {\n      userFound = _react2.default.createElement('i', { className: 'fa fa-check ldap-success' });\n    }\n\n    var loginCheck = void 0;\n    if (loginStatus.result.login_authenticated) {\n      loginCheck = _react2.default.createElement('i', { className: 'fa fa-check ldap-success' });\n    } else if (this.state.loginPassword === '') {\n      loginCheck = _react2.default.createElement('i', { className: 'fa fa-question ldap-info' });\n    } else {\n      loginCheck = _react2.default.createElement('i', { className: 'fa fa-times ldap-failure' });\n    }\n\n    var serverResponse = void 0;\n    if (loginStatus.result.exception) {\n      serverResponse = _react2.default.createElement(\n        'pre',\n        null,\n        loginStatus.result.exception\n      );\n    }\n\n    var attributes = Object.keys(loginStatus.result.entry).map(function (key) {\n      return [_react2.default.createElement(\n        'dt',\n        null,\n        key\n      ), _react2.default.createElement(\n        'dd',\n        null,\n        loginStatus.result.entry[key]\n      )];\n    });\n    var formattedEntry = attributes.length > 0 ? _react2.default.createElement(\n      'dl',\n      null,\n      attributes\n    ) : _react2.default.createElement(\n      'p',\n      null,\n      'LDAP server did not return any attributes for the user.'\n    );\n\n    var groups = loginStatus.result.groups ? loginStatus.result.groups.map(function (group) {\n      return _react2.default.createElement(\n        'li',\n        { key: group },\n        group\n      );\n    }) : [];\n    var formattedGroups = groups.length > 0 ? _react2.default.createElement(\n      'ul',\n      { style: { padding: 0 } },\n      groups\n    ) : _react2.default.createElement(\n      'p',\n      null,\n      'LDAP server did not return any groups for the user.'\n    );\n\n    return _react2.default.createElement(\n      _reactBootstrap.Row,\n      null,\n      _react2.default.createElement(\n        _reactBootstrap.Col,\n        { sm: 9, smOffset: 3 },\n        _react2.default.createElement(\n          _reactBootstrap.Panel,\n          { header: title, bsStyle: style, className: 'ldap-test-login-result' },\n          _react2.default.createElement(\n            'ul',\n            { className: 'login-status' },\n            _react2.default.createElement(\n              'li',\n              null,\n              _react2.default.createElement(\n                'h4',\n                null,\n                'User found ',\n                userFound\n              )\n            ),\n            _react2.default.createElement(\n              'li',\n              null,\n              _react2.default.createElement(\n                'h4',\n                null,\n                'Login attempt ',\n                loginCheck\n              )\n            )\n          ),\n          serverResponse && _react2.default.createElement(\n            'h4',\n            null,\n            'Server response'\n          ),\n          serverResponse,\n          _react2.default.createElement(\n            'h4',\n            null,\n            'User\\'s LDAP attributes'\n          ),\n          formattedEntry,\n          _react2.default.createElement(\n            'h4',\n            null,\n            'User\\'s LDAP groups'\n          ),\n          formattedGroups\n        )\n      )\n    );\n  },\n  render: function render() {\n    var loginStatus = this.state.loginStatus;\n    var loginDisabled = this.props.disabled || !this.state.loginUser || loginStatus.loading;\n\n    return _react2.default.createElement(\n      'div',\n      null,\n      _react2.default.createElement(\n        _bootstrap.Input,\n        { id: 'test_login_username', labelClassName: 'col-sm-3', wrapperClassName: 'col-sm-9', label: 'Login test',\n          help: 'Verify the previous settings by loading the entry for the given user name. If you omit the password, no authentication attempt will be made.' },\n        _react2.default.createElement(\n          _reactBootstrap.Row,\n          { className: 'row-sm' },\n          _react2.default.createElement(\n            _reactBootstrap.Col,\n            { sm: 5 },\n            _react2.default.createElement('input', { type: 'text', id: 'test_login_username', name: 'test_login_username', className: 'form-control',\n              value: this.state.loginUser, onChange: this._changeLoginForm,\n              onKeyPress: this._disableSubmitOnEnter,\n              placeholder: 'Username for login test', disabled: this.props.disabled })\n          ),\n          _react2.default.createElement(\n            _reactBootstrap.Col,\n            { sm: 5 },\n            _react2.default.createElement('input', { type: 'password', id: 'test_login_password', name: 'test_login_password', className: 'form-control',\n              value: this.state.testLoginPassword, onChange: this._changeLoginForm,\n              onKeyPress: this._disableSubmitOnEnter,\n              placeholder: 'Password', disabled: this.props.disabled })\n          ),\n          _react2.default.createElement(\n            _reactBootstrap.Col,\n            { sm: 2 },\n            _react2.default.createElement(\n              _reactBootstrap.Button,\n              { bsStyle: this._loginTestButtonStyle(), disabled: loginDisabled,\n                onClick: this._testLogin },\n              loginStatus.loading ? 'Testing...' : 'Test login'\n            )\n          )\n        )\n      ),\n      this._formatLoginStatus(loginStatus)\n    );\n  }\n});\n\nexports.default = TestLdapLogin;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1367:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _DocsHelper = __webpack_require__(952);\n\nvar _DocsHelper2 = _interopRequireDefault(_DocsHelper);\n\nvar _PermissionsMixin = __webpack_require__(165);\n\nvar _PermissionsMixin2 = _interopRequireDefault(_PermissionsMixin);\n\n__webpack_require__(1223);\n\nvar _PageHeader = __webpack_require__(265);\n\nvar _PageHeader2 = _interopRequireDefault(_PageHeader);\n\nvar _DocumentationLink = __webpack_require__(957);\n\nvar _DocumentationLink2 = _interopRequireDefault(_DocumentationLink);\n\nvar _AuthenticationComponent = __webpack_require__(1218);\n\nvar _AuthenticationComponent2 = _interopRequireDefault(_AuthenticationComponent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AuthenticationPage = _react2.default.createClass({\n  displayName: 'AuthenticationPage',\n\n\n  propTypes: {\n    children: _react2.default.PropTypes.object,\n    location: _react2.default.PropTypes.object.isRequired,\n    params: _react2.default.PropTypes.object.isRequired,\n    history: _react2.default.PropTypes.object.isRequired\n  },\n\n  mixins: [_PermissionsMixin2.default],\n\n  render: function render() {\n    return _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        _PageHeader2.default,\n        { title: 'Authentication Management' },\n        _react2.default.createElement(\n          'span',\n          null,\n          'Configure Graylog\\'s authentication providers and manage the active users of this Graylog cluster.'\n        ),\n        _react2.default.createElement(\n          'span',\n          null,\n          'Read more authentication in the ',\n          _react2.default.createElement(_DocumentationLink2.default, { page: _DocsHelper2.default.PAGES.USERS_ROLES,\n            text: 'documentation' }),\n          '.'\n        )\n      ),\n      _react2.default.createElement(\n        _reactBootstrap.Row,\n        { className: 'content' },\n        _react2.default.createElement(\n          _reactBootstrap.Col,\n          { md: 12 },\n          _react2.default.createElement(\n            _AuthenticationComponent2.default,\n            { location: this.props.location, params: this.props.params, history: this.props.history },\n            this.props.children\n          )\n        )\n      )\n    );\n  }\n}); // Make sure to load all auth config plugins!\n\nexports.default = AuthenticationPage;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1422:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(19)();\n// imports\n\n\n// module\nexports.push([module.i, \"._1-7A7Wk93i64abyb8RD454{border-right:1px solid #d1d1d1}._19WVz2Pea58X7AsOkte5Ft{border-left:1px solid #d1d1d1;margin-left:-1px}.GzKGC_ryb3VuVQhgY0qvA{border-bottom:1px solid #d1d1d1}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"subnavigation\": \"_1-7A7Wk93i64abyb8RD454\",\n\t\"contentpane\": \"_19WVz2Pea58X7AsOkte5Ft\",\n\t\"divider\": \"GzKGC_ryb3VuVQhgY0qvA\"\n};\n\n/***/ }),\n\n/***/ 1423:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(19)();\n// imports\n\n\n// module\nexports.push([module.i, \".ldap-test-login-result h4{margin-bottom:10px}.ldap-test-login-result .login-status{padding:0;margin-bottom:10px}.ldap-test-login-result .login-status li{display:inline-block;margin-right:20px}.ldap-success{color:green}.ldap-failure{color:maroon}.ldap-info{color:#337ab7}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 1493:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(1422);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(20)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./AuthenticationComponent.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./AuthenticationComponent.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 1500:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar refs = 0;\nvar dispose;\nvar content = __webpack_require__(1423);\nif(typeof content === 'string') content = [[module.i, content, '']];\nexports.use = exports.ref = function() {\n\tif(!(refs++)) {\n\t\texports.locals = content.locals;\n\t\tdispose = __webpack_require__(20)(content, {});\n\t}\n\treturn exports;\n};\nexports.unuse = exports.unref = function() {\n\tif(!(--refs)) {\n\t\tdispose();\n\t\tdispose = null;\n\t}\n};\nif(false) {\n\tvar lastRefs = module.hot.data && module.hot.data.refs || 0;\n\tif(lastRefs) {\n\t\texports.ref();\n\t\tif(!content.locals) {\n\t\t\trefs = lastRefs;\n\t\t}\n\t}\n\tif(!content.locals) {\n\t\tmodule.hot.accept();\n\t}\n\tmodule.hot.dispose(function(data) {\n\t\tdata.refs = content.locals ? 0 : refs;\n\t\tif(dispose) {\n\t\t\tdispose();\n\t\t}\n\t});\n}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 21.200197dca04f05abe3f2.js","import React from 'react';\nimport { DocumentTitle, PageHeader } from 'components/common';\n\nconst AccessTokenConfig = () => {\n  return (\n    <DocumentTitle title=\"Access Token Authenticator\">\n      <span>\n        <PageHeader title=\"Access Token Authenticator\" subpage>\n          <span>Each user can generate access tokens to avoid having to use their main password in insecure scripts.</span>\n        </PageHeader>\n        <span>There currently is no configuration available for access tokens. You can safely disable this authenticator if you do not use access tokens.</span>\n      </span>\n    </DocumentTitle>\n  );\n};\n\nexport default AccessTokenConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/AccessTokenConfig.jsx","import React from 'react';\nimport { Row, Col, Button, Alert, Table } from 'react-bootstrap';\nimport BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\nimport { DocumentTitle, PageHeader, IfPermitted, SortableList } from 'components/common';\nimport Routes from 'routing/Routes';\nimport ObjectUtils from 'util/ObjectUtils';\nimport naturalSort from 'javascript-natural-sort';\n\nconst AuthProvidersConfig = React.createClass({\n  propTypes: {\n    config: React.PropTypes.object.isRequired,\n    descriptors: React.PropTypes.object.isRequired,\n    updateConfig: React.PropTypes.func.isRequired,\n    history: React.PropTypes.object.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      config: {\n        disabled_realms: [],\n        realm_order: [],\n      },\n    };\n  },\n\n  getInitialState() {\n    return {\n      config: {\n        disabled_realms: this.props.config.disabled_realms,\n        realm_order: this.props.config.realm_order,\n      },\n    };\n  },\n\n  _openModal() {\n    this.refs.configModal.open();\n  },\n\n  _closeModal() {\n    this.refs.configModal.close();\n  },\n\n  _saveConfig() {\n    if (!this._hasNoActiveRealm()) {\n      this.props.updateConfig(this.state.config).then(() => {\n        this._closeModal();\n      });\n    }\n  },\n\n  _resetConfig() {\n    // Reset to initial state when the modal is closed without saving.\n    this.setState(this.getInitialState());\n  },\n\n  _onCancel() {\n    this.props.history.pushState(null, Routes.SYSTEM.AUTHENTICATION.OVERVIEW);\n  },\n\n  _updateSorting(newSorting) {\n    const update = ObjectUtils.clone(this.state.config);\n\n    update.realm_order = newSorting.map(entry => entry.id);\n\n    this.setState({ config: update });\n  },\n\n  _toggleStatus(realmName) {\n    return () => {\n      const disabledProcessors = this.state.config.disabled_realms;\n      const update = ObjectUtils.clone(this.state.config);\n      const checked = this.refs[realmName].checked;\n\n      if (checked) {\n        update.disabled_realms = disabledProcessors.filter(p => p !== realmName);\n      } else if (disabledProcessors.indexOf(realmName) === -1) {\n        update.disabled_realms.push(realmName);\n      }\n\n      this.setState({ config: update });\n    };\n  },\n\n  _hasNoActiveRealm() {\n    return this.state.config.disabled_realms.length >= this.state.config.realm_order.length;\n  },\n\n  _noActiveRealmWarning() {\n    if (this._hasNoActiveRealm()) {\n      return (\n        <Alert bsStyle=\"danger\">\n          <strong>ERROR:</strong> No active authentication provider!\n        </Alert>\n      );\n    }\n    return null;\n  },\n\n  _summary() {\n    return this.state.config.realm_order.map((name, idx) => {\n      const status = this.state.config.disabled_realms.filter(disabledName => disabledName === name).length > 0 ? 'disabled' : 'active';\n      const realm = (this.props.descriptors[name] || { id: name, title: 'Unavailable' });\n      return (\n        <tr key={idx}>\n          <td>{idx + 1}</td>\n          <td>{realm.displayName}</td>\n          <td>{realm.description}</td>\n          <td>{status}</td>\n        </tr>\n      );\n    });\n  },\n\n  _sortableItems() {\n    return this.state.config.realm_order.map((name) => {\n      const realm = (this.props.descriptors[name] || { id: name, title: 'Unavailable' });\n      return { id: realm.name, title: realm.displayName };\n    });\n  },\n\n  _statusForm() {\n    return ObjectUtils.clone(this.state.config.realm_order).sort((a, b) => naturalSort(a.displayName, b.displayName)).map((realmName, idx) => {\n      const enabled = this.state.config.disabled_realms.filter(disabledName => disabledName === realmName).length < 1;\n      const realm = (this.props.descriptors[realmName] || { id: realmName, displayName: 'Unavailable' });\n\n      return (\n        <tr key={idx}>\n          <td>{realm.displayName}</td>\n          <td>\n            <input ref={realm.name}\n                   type=\"checkbox\"\n                   checked={enabled}\n                   disabled={!realm.canBeDisabled}\n                   onChange={this._toggleStatus(realm.name)} />\n          </td>\n        </tr>\n      );\n    });\n  },\n\n  render() {\n    return (\n      <DocumentTitle title=\"Authentication Providers\">\n        <span>\n          <PageHeader title=\"Authentication Providers\" subpage>\n            <span>The following authentication providers executed in order during login. Disabled providers will be\n              skipped.<br />A user is authenticated by the first matching provider, a successful match can cause a Graylog account for\n              this user to be created.\n            </span>\n          </PageHeader>\n          <Row>\n            <Col md={6}>\n              <Table striped bordered className=\"top-margin\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Provider</th>\n                    <th>Description</th>\n                    <th>Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this._summary()}\n                </tbody>\n              </Table>\n\n              <IfPermitted permissions=\"clusterconfigentry:edit\">\n                <Button bsStyle=\"primary\" onClick={this._openModal} className=\"save-button-margin\">Update</Button>\n                <Button onClick={this._onCancel}>Cancel</Button>\n              </IfPermitted>\n\n              <BootstrapModalForm ref=\"configModal\"\n                                  title=\"Update Authentication Provider Configuration\"\n                                  onSubmitForm={this._saveConfig}\n                                  onModalClose={this._resetConfig}\n                                  submitButtonText=\"Save\">\n                <h3>Order</h3>\n                <p>Use drag and drop to change the execution order of the authentication providers.</p>\n                <SortableList items={this._sortableItems()} onMoveItem={this._updateSorting} />\n\n                <h3>Status</h3>\n                <p>Change the checkboxes to change the status of an authentication provider.</p>\n                <Table striped bordered condensed className=\"top-margin\">\n                  <thead>\n                    <tr>\n                      <th>Provider</th>\n                      <th>Enabled</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this._statusForm()}\n                  </tbody>\n                </Table>\n                {this._noActiveRealmWarning()}\n              </BootstrapModalForm>\n            </Col>\n          </Row>\n        </span>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport default AuthProvidersConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/AuthProvidersConfig.jsx","import React from 'react';\nimport Reflux from 'reflux';\nimport { Alert, Nav, NavItem, Row, Col } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Routes from 'routing/Routes';\nimport { Spinner } from 'components/common';\nimport { PluginStore } from 'graylog-web-plugin/plugin';\n\nimport PermissionsMixin from 'util/PermissionsMixin';\nimport AuthProvidersConfig from './AuthProvidersConfig';\n\nimport ActionsProvider from 'injection/ActionsProvider';\nconst AuthenticationActions = ActionsProvider.getActions('Authentication');\n\nimport StoreProvider from 'injection/StoreProvider';\nconst AuthenticationStore = StoreProvider.getStore('Authentication');\nconst CurrentUserStore = StoreProvider.getStore('CurrentUser');\n\nimport AuthenticationComponentStyle from '!style!css!./AuthenticationComponent.css';\n\nconst AuthenticationComponent = React.createClass({\n\n  propTypes: {\n    location: React.PropTypes.object.isRequired,\n    params: React.PropTypes.object.isRequired,\n    history: React.PropTypes.object.isRequired,\n    children: React.PropTypes.element,\n  },\n\n  mixins: [Reflux.connect(AuthenticationStore), Reflux.connect(CurrentUserStore), PermissionsMixin],\n\n  componentDidMount() {\n    AuthenticationActions.load();\n\n    PluginStore.exports('authenticatorConfigurations').forEach((authConfig) => {\n      this.authenticatorConfigurations[authConfig.name] = authConfig;\n      // TODO load per authenticator config\n    });\n  },\n\n  // contains the 'authname' -> plugin descriptor\n  authenticatorConfigurations: {},\n\n  _pluginPane() {\n    const name = this.props.params.name;\n    const auth = this.authenticatorConfigurations[name];\n\n    if (auth) {\n      return React.createElement(auth.component, {\n        key: `auth-configuration-${name}`,\n        history: this.props.history,\n      });\n    }\n    return (<Alert bsStyle=\"danger\">Plugin component missing for authenticator <code>{name}</code>, this is an error.</Alert>);\n  },\n\n  _onUpdateProviders(config) {\n    return AuthenticationActions.update('providers', config);\n  },\n\n  _contentComponent() {\n    if (!this.state.authenticators) {\n      return <Spinner />;\n    }\n    if (this.props.params.name === undefined) {\n      return (<AuthProvidersConfig config={this.state.authenticators}\n                                   descriptors={this.authenticatorConfigurations}\n                                   updateConfig={this._onUpdateProviders}\n                                   history={this.props.history} />);\n    }\n    return this._pluginPane();\n  },\n\n  render() {\n    let authenticators = [];\n    const auths = this.state.authenticators;\n    if (auths) {\n      // only show the entries if the user is permitted to change them, makes no sense otherwise\n      if (this.isPermitted(this.state.currentUser.permissions, ['authentication:edit'])) {\n        authenticators = auths.realm_order.map((name, idx) => {\n          const auth = this.authenticatorConfigurations[name];\n          const title = (auth || { displayName: name }).displayName;\n          const numberedTitle = `${idx + 1}. ${title}`;\n          return (<LinkContainer key={`container-${name}`} to={Routes.SYSTEM.AUTHENTICATION.PROVIDERS.provider(name)}>\n            <NavItem key={name} title={numberedTitle}>{numberedTitle}</NavItem>\n          </LinkContainer>);\n        });\n\n        authenticators.unshift(\n          <NavItem key=\"divider\" disabled title=\"Provider Settings\" className={AuthenticationComponentStyle.divider}>Provider Settings</NavItem>,\n        );\n        authenticators.unshift(\n          <LinkContainer key=\"container-settings\" to={Routes.SYSTEM.AUTHENTICATION.PROVIDERS.CONFIG}>\n            <NavItem key=\"settings\" title=\"Configure Provider Order\">Configure Provider Order</NavItem>\n          </LinkContainer>,\n        );\n      }\n    } else {\n      authenticators = [<NavItem key={'loading'} disabled title=\"Loading...\">Loading...</NavItem>];\n    }\n\n    // add submenu items based on permissions\n    if (this.isPermitted(this.state.currentUser.permissions, ['roles:read'])) {\n      authenticators.unshift(\n        <LinkContainer key=\"roles\" to={Routes.SYSTEM.AUTHENTICATION.ROLES}>\n          <NavItem title=\"Roles\">Roles</NavItem>\n        </LinkContainer>,\n      );\n    }\n    if (this.isPermitted(this.state.currentUser.permissions, ['users:list'])) {\n      authenticators.unshift(\n        <LinkContainer key=\"users\" to={Routes.SYSTEM.AUTHENTICATION.USERS.LIST}>\n          <NavItem title=\"Users\">Users</NavItem>\n        </LinkContainer>,\n      );\n    }\n\n    if (authenticators.length === 0) {\n      // special case, this is a user editing their own profile\n      authenticators = [<LinkContainer key=\"profile-edit\" to={Routes.SYSTEM.AUTHENTICATION.USERS.edit(encodeURIComponent(this.state.currentUser.username))}>\n        <NavItem title=\"Edit User\">Edit User</NavItem>\n      </LinkContainer>];\n    }\n    const subnavigation = (\n      <Nav stacked bsStyle=\"pills\">\n        {authenticators}\n      </Nav>\n    );\n\n    const contentComponent = React.Children.count(this.props.children) === 1 ? React.Children.only(this.props.children) : this._contentComponent();\n\n    return (<Row>\n      <Col md={2} className={AuthenticationComponentStyle.subnavigation}>{subnavigation}</Col>\n      <Col md={10} className={AuthenticationComponentStyle.contentpane}>{contentComponent}</Col>\n    </Row>);\n  },\n});\n\nexport default AuthenticationComponent;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/AuthenticationComponent.jsx","import React, { PropTypes } from 'react';\nimport { DocumentTitle, PageHeader } from 'components/common';\nimport { Button } from 'react-bootstrap';\n\nimport LdapComponent from 'components/ldap/LdapComponent';\nimport LdapGroupsComponent from 'components/ldap/LdapGroupsComponent';\n\nimport CombinedProvider from 'injection/CombinedProvider';\nconst { LdapActions } = CombinedProvider.get('Ldap');\n\nimport Routes from 'routing/Routes';\n\nconst LegacyLdapConfig = React.createClass({\n  propTypes: {\n    history: PropTypes.object.isRequired,\n  },\n  getInitialState() {\n    return {\n      showSettings: true,\n    };\n  },\n\n  componentDidMount() {\n    LdapActions.loadSettings();\n  },\n\n  _toggleButton() {\n    this.setState({ showSettings: !this.state.showSettings });\n  },\n\n  _onSettingsCancel() {\n    this._toggleButton();\n  },\n\n  _onCancel() {\n    this.props.history.pushState(null, Routes.SYSTEM.AUTHENTICATION.OVERVIEW);\n  },\n\n  render() {\n    const toggleButtonText = this.state.showSettings ? 'LDAP Group Mapping' : 'LDAP Settings';\n    const activeComponent = (this.state.showSettings ?\n      <LdapComponent onCancel={this._onCancel} onShowGroups={this._toggleButton} /> :\n      <LdapGroupsComponent onCancel={this._onSettingsCancel} onShowConfig={this._toggleButton} />);\n\n    return (\n      <DocumentTitle title=\"LDAP Settings\">\n        <span>\n          <PageHeader title=\"LDAP Settings\" subpage>\n            <span>\n              This page is the only resource you need to set up the Graylog LDAP integration. You can test the\n              connection to your LDAP server and even try to log in with an LDAP account of your choice right away.\n            </span>\n            {null}\n            <span>\n              <Button bsStyle=\"success\" onClick={this._toggleButton}>{toggleButtonText}</Button>\n            </span>\n          </PageHeader>\n          {activeComponent}\n        </span>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport default LegacyLdapConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/LegacyLdapConfig.jsx","import React, { PropTypes } from 'react';\nimport { DocumentTitle, PageHeader } from 'components/common';\n\nconst MongoDbPasswordConfig = React.createClass({\n  propTypes: {\n    config: PropTypes.object,\n  },\n  render() {\n    return (\n      <DocumentTitle title=\"Password Authenticator\">\n        <span>\n          <PageHeader title=\"Password Authenticator\" subpage>\n            <span>This authenticator uses the password stored in MongoDB to grant access to users, it usually runs last, so that other authentication sources have priority.</span>\n          </PageHeader>\n          <span>If you only rely on external authentication systems, such as LDAP or Active Directory, you can disable this authenticator. It currently has no configuration options.</span>\n        </span>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport default MongoDbPasswordConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/MongoDbPasswordConfig.jsx","import React from 'react';\nimport { DocumentTitle, PageHeader } from 'components/common';\n\nconst MongoDbSessionConfig = () => {\n  return (\n    <DocumentTitle title=\"Session Authenticator\">\n      <span>\n        <PageHeader title=\"Session Authenticator\" subpage>\n          <span>This authenticator uses the session supplied from the web interface to grant access to logged in users, it usually runs first.</span>\n        </PageHeader>\n        <span>Since sessions are necessary to let the web interface function it cannot be disabled.</span>\n      </span>\n    </DocumentTitle>\n  );\n};\n\nexport default MongoDbSessionConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/MongoDbSessionConfig.jsx","import React from 'react';\nimport { DocumentTitle, PageHeader } from 'components/common';\n\nconst RootUserConfig = () => {\n  return (\n    <DocumentTitle title=\"Admin User Authenticator\">\n      <span>\n        <PageHeader title=\"Admin User Authenticator\" subpage>\n          <span>This authenticator grants access to the admin user specified in the configuration file.</span>\n        </PageHeader>\n        <span>Currently the admin user authenticator cannot be configured outside of the configuration file. It can also not be disabled at the moment.</span>\n      </span>\n    </DocumentTitle>\n  );\n};\n\nexport default RootUserConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/RootUserConfig.jsx","import { PluginManifest, PluginStore } from 'graylog-web-plugin/plugin';\nimport MongoDbPasswordConfig from './MongoDbPasswordConfig';\nimport MongoDbSessionConfig from './MongoDbSessionConfig';\nimport LegacyLdapConfig from './LegacyLdapConfig';\nimport RootUserConfig from './RootUserConfig';\nimport AccessTokenConfig from './AccessTokenConfig';\n\nPluginStore.register(new PluginManifest({}, {\n  authenticatorConfigurations: [\n    {\n      name: 'mongodb-password',\n      displayName: 'Passwords',\n      description: 'Graylog managed account passwords (from MongoDB)',\n      canBeDisabled: true,\n      component: MongoDbPasswordConfig,\n    },\n    {\n      name: 'mongodb-session',\n      displayName: 'Sessions',\n      description: 'Established session authenticator',\n      canBeDisabled: false,\n      component: MongoDbSessionConfig,\n    },\n    {\n      name: 'legacy-ldap',\n      displayName: 'LDAP/Active Directory',\n      description: 'Authenticates against external system and creates accounts in Graylog',\n      canBeDisabled: true,\n      component: LegacyLdapConfig,\n    },\n    {\n      name: 'root-user',\n      displayName: 'Admin user',\n      description: 'Static account configured in the server configuration file',\n      canBeDisabled: false,\n      component: RootUserConfig,\n    },\n    {\n      name: 'access-token',\n      displayName: 'API Tokens',\n      description: 'Per user tokens which do not establish sessions',\n      canBeDisabled: true,\n      component: AccessTokenConfig,\n    },\n  ],\n}));\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/authentication/index.js","import React from 'react';\nimport Reflux from 'reflux';\nimport { Row, Col, Button, Panel } from 'react-bootstrap';\nimport URI from 'urijs';\nimport naturalSort from 'javascript-natural-sort';\n\nimport { Input } from 'components/bootstrap';\nimport { MultiSelect, Spinner } from 'components/common';\nimport ObjectUtils from 'util/ObjectUtils';\n\nimport TestLdapConnection from './TestLdapConnection';\nimport TestLdapLogin from './TestLdapLogin';\n\nimport StoreProvider from 'injection/StoreProvider';\nconst RolesStore = StoreProvider.getStore('Roles');\nconst LdapStore = StoreProvider.getStore('Ldap');\n\nimport ActionsProvider from 'injection/ActionsProvider';\nconst LdapActions = ActionsProvider.getActions('Ldap');\n\nconst HelperText = {\n  activeDirectory: {\n    SYSTEM_USERNAME: (\n      <span>\n        The username for the initial connection to the Active Directory server, e.g. <code>ldapbind@some.domain</code>.<br />\n        This needs to match the <code>userPrincipalName</code> of that user.\n      </span>\n    ),\n    SYSTEM_PASSWORD: ('The password for the initial connection to the Active Directory server.'),\n    SEARCH_BASE: (\n      <span>\n        The base tree to limit the Active Directory search query to, e.g. <code>cn=users,dc=example,dc=com</code>.\n      </span>\n    ),\n    SEARCH_PATTERN: (\n      <span>\n        For example <code className=\"text-nowrap\">{'(&(objectClass=user)(sAMAccountName={0}))'}</code>.{' '}\n        The string <code>{'{0}'}</code> will be replaced by the entered username.\n      </span>\n    ),\n    DISPLAY_NAME: (\n      <span>\n        Which Active Directory attribute to use for the full name of the user in Graylog, e.g. <code>displayName</code>.<br />\n        Try to load a test user using the form below, if you are unsure which attribute to use.\n      </span>\n    ),\n    GROUP_SEARCH_BASE: (\n      <span>\n        The base tree to limit the Active Directory group search query to, e.g. <code>cn=users,dc=example,dc=com</code>.\n      </span>\n    ),\n    GROUP_PATTERN: (\n      <span>\n        The search pattern used to find groups in Active Directory for mapping to Graylog roles, e.g.{' '}\n        <code className=\"text-nowrap\">(objectClass=group)</code> or{' '}\n        <code className=\"text-nowrap\">(&amp;(objectClass=group)(cn=graylog*))</code>.\n      </span>\n    ),\n    GROUP_ID: (\n      <span>Which Active Directory attribute to use for the full name of the group, usually <code>cn</code>.</span>\n    ),\n    defaultGroup: onClickHandler => (\n      <span>\n        The default Graylog role determines whether a user created via Active Directory can access the entire system, or has limited access.<br />\n        You can assign additional permissions by{' '}\n        <a href=\"#\" onClick={onClickHandler}>mapping Active Directory groups to Graylog roles</a>,{' '}\n        or you can assign additional Graylog roles to Active Directory users below.\n      </span>\n    ),\n    ADDITIONAL_GROUPS: (\n      'Choose the additional roles each Active Directory user will have by default, leave it empty if you want to map Active Directory groups to Graylog roles.'\n    ),\n  },\n\n  ldap: {\n    SYSTEM_USERNAME: (\n      <span>\n        The username for the initial connection to the LDAP server, e.g.{' '}\n        <code className=\"text-nowrap\">uid=admin,ou=system</code>, this might be optional depending on your LDAP server.\n      </span>\n    ),\n    SYSTEM_PASSWORD: ('The password for the initial connection to the LDAP server.'),\n    SEARCH_BASE: (\n      <span>\n        The base tree to limit the LDAP search query to, e.g. <code\n        className=\"text-nowrap\">cn=users,dc=example,dc=com</code>.\n      </span>\n    ),\n    SEARCH_PATTERN: (\n      <span>\n        For example <code className=\"text-nowrap\">{'(&(objectClass=inetOrgPerson)(uid={0}))'}</code>.{' '}\n        The string <code>{'{0}'}</code> will be replaced by the entered username.\n      </span>\n    ),\n    DISPLAY_NAME: (\n      <span>\n        Which LDAP attribute to use for the full name of the user in Graylog, e.g. <code>cn</code>.<br />\n        Try to load a test user using the form below, if you are unsure which attribute to use.\n      </span>\n    ),\n    GROUP_SEARCH_BASE: (\n      <span>\n        The base tree to limit the LDAP group search query to, e.g. <code>cn=users,dc=example,dc=com</code>.\n      </span>\n    ),\n    GROUP_PATTERN: (\n      <span>\n        The search pattern used to find groups in LDAP for mapping to Graylog roles, e.g.{' '}\n        <code>(objectClass=groupOfNames)</code> or{' '}\n        <code className=\"text-nowrap\">(&amp;(objectClass=groupOfNames)(cn=graylog*))</code>.\n      </span>\n    ),\n    GROUP_ID: (\n      <span>Which LDAP attribute to use for the full name of the group, usually <code>cn</code>.</span>\n    ),\n    defaultGroup: onClickHandler => (\n      <span>\n        The default Graylog role determines whether a user created via LDAP can access the entire system, or has limited access.<br />\n        You can assign additional permissions by{' '}\n        <a href=\"#\" onClick={onClickHandler}>mapping LDAP groups to Graylog roles</a>,{' '}\n        or you can assign additional Graylog roles to LDAP users below.\n      </span>\n    ),\n    ADDITIONAL_GROUPS: (\n      'Choose the additional roles each LDAP user will have by default, leave it empty if you want to map LDAP groups to Graylog roles.'\n    ),\n  },\n};\n\nconst LdapComponent = React.createClass({\n  mixins: [Reflux.listenTo(LdapStore, '_onLdapSettingsChange', '_onLdapSettingsChange')],\n\n  propTypes: {\n    onCancel: React.PropTypes.func.isRequired,\n    onShowGroups: React.PropTypes.func.isRequired,\n  },\n\n  getInitialState() {\n    return {\n      ldapSettings: undefined,\n      ldapUri: undefined,\n      roles: undefined,\n    };\n  },\n\n  componentDidMount() {\n    RolesStore.loadRoles().then((roles) => {\n      this.setState({ roles: this._formatAdditionalRoles(roles) });\n    });\n  },\n\n  _formatAdditionalRoles(roles) {\n    return roles\n      .filter(r => !(r.name.toLowerCase() === 'reader' || r.name.toLowerCase() === 'admin'))\n      .sort((r1, r2) => naturalSort(r1.name.toLowerCase(), r2.name.toLowerCase()))\n      .map((r) => {\n        return { label: r.name, value: r.name };\n      });\n  },\n\n  _onLdapSettingsChange(state) {\n    if (!state.ldapSettings) {\n      return;\n    }\n\n    // Clone settings object, so we don't the store reference\n    const settings = ObjectUtils.clone(state.ldapSettings);\n    const ldapUri = new URI(settings.ldap_uri);\n    this.setState({ ldapSettings: settings, ldapUri: ldapUri });\n  },\n\n  _isLoading() {\n    return !this.state.ldapSettings || !this.state.roles;\n  },\n\n  _bindChecked(ev, value) {\n    this._setSetting(ev.target.name, typeof value === 'undefined' ? ev.target.checked : value);\n  },\n\n  _bindValue(ev) {\n    this._setSetting(ev.target.name, ev.target.value);\n  },\n\n  _updateSsl(ev) {\n    this._setUriScheme(ev.target.checked ? 'ldaps' : 'ldap');\n  },\n\n  _setSetting(attribute, value) {\n    const newState = {};\n\n    let formattedValue = value;\n    // Convert URI object into string to store it in the state\n    if (attribute === 'ldap_uri' && typeof value === 'object') {\n      newState.ldapUri = value;\n      formattedValue = value.toString();\n    }\n\n    // Clone state to not modify it directly\n    const settings = ObjectUtils.clone(this.state.ldapSettings);\n    settings[attribute] = formattedValue;\n    newState.ldapSettings = settings;\n    newState.serverConnectionStatus = {};\n    this.setState(newState);\n  },\n\n  _setUriScheme(scheme) {\n    const ldapUri = this.state.ldapUri.clone();\n    ldapUri.scheme(scheme);\n    this._setSetting('ldap_uri', ldapUri);\n  },\n\n  _uriScheme() {\n    return `${this.state.ldapUri.scheme()}://`;\n  },\n\n  _setUriHost(host) {\n    const ldapUri = this.state.ldapUri.clone();\n    ldapUri.hostname(host);\n    this._setSetting('ldap_uri', ldapUri);\n  },\n\n  _uriHost() {\n    return this.state.ldapUri.hostname();\n  },\n\n  _setUriPort(port) {\n    const ldapUri = this.state.ldapUri.clone();\n    ldapUri.port(port);\n    this._setSetting('ldap_uri', ldapUri);\n  },\n\n  _uriPort() {\n    return this.state.ldapUri.port();\n  },\n\n  _setAdditionalDefaultGroups(rolesString) {\n    // only keep non-empty entries\n    const roles = rolesString.split(',').filter(v => v !== '');\n    this._setSetting('additional_default_groups', roles);\n  },\n\n  _saveSettings(event) {\n    event.preventDefault();\n    LdapActions.update(this.state.ldapSettings);\n  },\n\n  _onShowGroups(event) {\n    event.preventDefault();\n    this.props.onShowGroups();\n  },\n\n  render() {\n    if (this._isLoading()) {\n      return <Spinner />;\n    }\n\n    const isAD = this.state.ldapSettings.active_directory;\n    const disabled = !this.state.ldapSettings.enabled;\n    const help = isAD ? HelperText.activeDirectory : HelperText.ldap;\n\n    const rolesOptions = this.state.roles;\n\n    return (\n      <Row>\n        <Col lg={8}>\n          <form id=\"ldap-settings-form\" className=\"form-horizontal\" onSubmit={this._saveSettings}>\n            <Input type=\"checkbox\" label=\"Enable LDAP\"\n                   help=\"User accounts will be taken from LDAP/Active Directory, the administrator account will still be available.\"\n                   wrapperClassName=\"col-sm-offset-3 col-sm-9\"\n                   name=\"enabled\"\n                   checked={this.state.ldapSettings.enabled}\n                   onChange={this._bindChecked} />\n\n            <fieldset>\n              <Row className=\"row-sm\">\n                <Col sm={12}>\n                  <legend>1. Server configuration</legend>\n                </Col>\n              </Row>\n              <Input id=\"active_directory\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" label=\"Server Type\">\n                <label className=\"radio-inline\">\n                  <input type=\"radio\" name=\"active_directory\"\n                         checked={!isAD} disabled={disabled}\n                         onChange={ev => this._bindChecked(ev, false)} />\n                  LDAP\n                </label>\n                <label className=\"radio-inline\">\n                  <input type=\"radio\" name=\"active_directory\"\n                         checked={isAD} disabled={disabled}\n                         onChange={ev => this._bindChecked(ev, true)} />\n                  Active Directory\n                </label>\n              </Input>\n\n              <Input id=\"ldap-uri-host\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" label=\"Server Address\">\n                <div className=\"input-group\">\n                  <span className=\"input-group-addon\">{this._uriScheme()}</span>\n                  <input type=\"text\" className=\"form-control\" id=\"ldap-uri-host\" value={this._uriHost()}\n                         placeholder=\"Hostname\" required onChange={ev => this._setUriHost(ev.target.value)}\n                         disabled={disabled} />\n                  <span className=\"input-group-addon input-group-separator\">:</span>\n                  <input type=\"number\" className=\"form-control\" id=\"ldap-uri-port\" value={this._uriPort()} min=\"1\"\n                         max=\"65535\" placeholder=\"Port\"\n                         required style={{ width: 120 }} onChange={ev => this._setUriPort(ev.target.value)}\n                         disabled={disabled} />\n                </div>\n                <label className=\"checkbox-inline\">\n                  <input type=\"checkbox\" name=\"ssl\" checked={this.state.ldapUri.scheme() === 'ldaps'}\n                         onChange={this._updateSsl}\n                         disabled={disabled} /> SSL\n                </label>\n                <label className=\"checkbox-inline\">\n                  <input type=\"checkbox\" name=\"use_start_tls\" value=\"true\" id=\"ldap-uri-starttls\"\n                         checked={this.state.ldapSettings.use_start_tls} onChange={this._bindChecked}\n                         disabled={disabled} /> StartTLS\n                </label>\n                <label className=\"checkbox-inline\">\n                  <input type=\"checkbox\" name=\"trust_all_certificates\" value=\"true\" id=\"trust-all-certificates\"\n                         checked={this.state.ldapSettings.trust_all_certificates} onChange={this._bindChecked}\n                         disabled={disabled} /> Allow self-signed certificates\n                </label>\n              </Input>\n\n              <Input type=\"text\" id=\"system_username\" name=\"system_username\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"System User DN\" label=\"System Username\"\n                     value={this.state.ldapSettings.system_username} help={help.SYSTEM_USERNAME}\n                     onChange={this._bindValue} disabled={disabled} />\n\n              <Input type=\"password\" id=\"system_password\" name=\"system_password\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"System Password\" label=\"System Password\"\n                     value={this.state.ldapSettings.system_password} help={help.SYSTEM_PASSWORD}\n                     onChange={this._bindValue} disabled={disabled} />\n            </fieldset>\n\n            <fieldset>\n              <Row className=\"row-sm\">\n                <Col sm={12}>\n                  <legend>2. Connection Test</legend>\n                </Col>\n              </Row>\n              <TestLdapConnection ldapSettings={this.state.ldapSettings} ldapUri={this.state.ldapUri} disabled={disabled} />\n            </fieldset>\n\n            <fieldset>\n              <Row className=\"row-sm\">\n                <Col sm={12}>\n                  <legend>3. User mapping</legend>\n                </Col>\n              </Row>\n              <Input type=\"text\" id=\"search_base\" name=\"search_base\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"Search Base\" label=\"Search Base DN\"\n                     value={this.state.ldapSettings.search_base} help={help.SEARCH_BASE}\n                     onChange={this._bindValue} disabled={disabled} required />\n\n              <Input type=\"text\" id=\"search_pattern\" name=\"search_pattern\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"Search Pattern\" label=\"User Search Pattern\"\n                     value={this.state.ldapSettings.search_pattern} help={help.SEARCH_PATTERN}\n                     onChange={this._bindValue} disabled={disabled} required />\n\n              <Input type=\"text\" id=\"display_name_attribute\" name=\"display_name_attribute\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"Display Name Attribute\" label=\"Display Name attribute\"\n                     value={this.state.ldapSettings.display_name_attribute} help={help.DISPLAY_NAME}\n                     onChange={this._bindValue} disabled={disabled} required />\n            </fieldset>\n\n            <fieldset>\n              <Row className=\"row-sm\">\n                <Col sm={12}>\n                  <legend>4. Group Mapping <small>(optional)</small></legend>\n                </Col>\n              </Row>\n              <Input type=\"text\" id=\"group_search_base\" name=\"group_search_base\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"Group Search Base\" label=\"Group Search Base DN\"\n                     value={this.state.ldapSettings.group_search_base} help={help.GROUP_SEARCH_BASE}\n                     onChange={this._bindValue} disabled={disabled} />\n\n              <Input type=\"text\" id=\"group_search_pattern\" name=\"group_search_pattern\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"Group Search Pattern\" label=\"Group Search Pattern\"\n                     value={this.state.ldapSettings.group_search_pattern} help={help.GROUP_PATTERN}\n                     onChange={this._bindValue} disabled={disabled} />\n\n              <Input type=\"text\" id=\"group_id_attribute\" name=\"group_id_attribute\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" placeholder=\"Group Id Attribute\" label=\"Group Name Attribute\"\n                     value={this.state.ldapSettings.group_id_attribute} help={help.GROUP_ID}\n                     onChange={this._bindValue} disabled={disabled} />\n\n              <Input id=\"default_group\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" label=\"Default User Role\"\n                     help={help.defaultGroup(this._onShowGroups)}>\n                <Row>\n                  <Col sm={4}>\n                    <select id=\"default_group\" name=\"default_group\" className=\"form-control\" required\n                            value={this.state.ldapSettings.default_group.toLowerCase()} disabled={disabled}\n                            onChange={ev => this._setSetting('default_group', ev.target.value)}>\n\n                      <option value=\"reader\">Reader - basic access</option>\n                      <option value=\"admin\">Administrator - complete access</option>\n                    </select>\n                  </Col>\n                </Row>\n              </Input>\n\n              <Row>\n                <Col sm={9} smOffset={3}>\n                  <Panel bsStyle=\"info\">\n                    Changing the static role assignment will only affect to new users created via LDAP/Active Directory!<br />\n                    Existing user accounts will be updated on their next login, or if you edit their roles manually.\n                  </Panel>\n                </Col>\n              </Row>\n\n              <Input id=\"additional_default_groups\" labelClassName=\"col-sm-3\"\n                     wrapperClassName=\"col-sm-9\" label=\"Additional Default Roles\"\n                     help={help.ADDITIONAL_GROUPS}>\n                <MultiSelect\n                  ref=\"select\"\n                  options={rolesOptions}\n                  disabled={disabled}\n                  value={this.state.ldapSettings.additional_default_groups}\n                  onChange={roles => this._setAdditionalDefaultGroups(roles)}\n                  placeholder=\"Choose additional roles...\"\n                />\n              </Input>\n\n              <Row>\n                <Col sm={9} smOffset={3}>\n                  <Panel bsStyle=\"info\">\n                    Changing the static role assignment will only affect to new users created via LDAP/Active Directory!<br />\n                    Existing user accounts will be updated on their next login, or if you edit their roles manually.\n                  </Panel>\n                </Col>\n              </Row>\n            </fieldset>\n\n            <fieldset>\n              <Row className=\"row-sm\">\n                <Col sm={12}>\n                  <legend>5. Login test</legend>\n                </Col>\n              </Row>\n              <TestLdapLogin ldapSettings={this.state.ldapSettings} disabled={disabled} />\n            </fieldset>\n\n            <fieldset>\n              <Row className=\"row-sm\">\n                <Col sm={12}>\n                  <legend>6. Store settings</legend>\n                </Col>\n              </Row>\n              <div className=\"form-group\">\n                <Col sm={9} smOffset={3}>\n                  <Button type=\"submit\" bsStyle=\"primary\" className=\"save-button-margin\">Save LDAP settings</Button>\n                  <Button onClick={this.props.onCancel}>Cancel</Button>\n                </Col>\n              </div>\n            </fieldset>\n          </form>\n        </Col>\n      </Row>\n    );\n  },\n});\n\nexport default LdapComponent;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ldap/LdapComponent.jsx","import React from 'react';\nimport Immutable from 'immutable';\nimport { Row, Col, Panel, Button } from 'react-bootstrap';\nimport naturalSort from 'javascript-natural-sort';\n\nimport { Input } from 'components/bootstrap';\nimport { Spinner } from 'components/common';\n\nimport ActionsProvider from 'injection/ActionsProvider';\nconst LdapGroupsActions = ActionsProvider.getActions('LdapGroups');\n\nimport StoreProvider from 'injection/StoreProvider';\nconst RolesStore = StoreProvider.getStore('Roles');\nconst LdapGroupsStore = StoreProvider.getStore('LdapGroups');\n\nconst LdapGroupsComponent = React.createClass({\n  propTypes: {\n    onCancel: React.PropTypes.func.isRequired,\n    onShowConfig: React.PropTypes.func.isRequired,\n  },\n\n  getInitialState() {\n    return {\n      groups: Immutable.Set.of(),\n      roles: Immutable.Set.of(),\n      mapping: Immutable.Map(),\n      groupsErrorMessage: null,\n    };\n  },\n\n  componentDidMount() {\n    LdapGroupsActions.loadMapping.triggerPromise().then(mapping => this.setState({ mapping: Immutable.Map(mapping) }));\n    LdapGroupsActions.loadGroups.triggerPromise()\n      .then(\n        groups => this.setState({ groups: Immutable.Set(groups) }),\n        error => {\n          if (error.additional.status !== 400) {\n            this.setState({ groupsErrorMessage: error });\n          }\n        },\n      );\n    RolesStore.loadRoles().then(roles => this.setState({ roles: Immutable.Set(roles) }));\n  },\n\n  _updateMapping(event) {\n    const role = event.target.value;\n    const group = event.target.getAttribute('data-group');\n    if (role === '') {\n      this.setState({ mapping: this.state.mapping.delete(group) });\n    } else {\n      this.setState({ mapping: this.state.mapping.set(group, role) });\n    }\n  },\n\n  _saveMapping(event) {\n    event.preventDefault();\n    LdapGroupsActions.saveMapping(this.state.mapping.toJS());\n  },\n\n  _onShowConfig(event) {\n    event.preventDefault();\n    this.props.onShowConfig();\n  },\n\n  _isLoading() {\n    return !(this.state.mapping && this.state.groups && this.state.roles);\n  },\n\n  render() {\n    if (this._isLoading()) {\n      return <Spinner />;\n    }\n\n    if (this.state.groupsErrorMessage) {\n      return (\n        <Panel header=\"Error: Unable to load LDAP groups\" bsStyle=\"danger\">\n          The error message was:<br />{this.state.groupsErrorMessage.message}\n        </Panel>\n      );\n    }\n\n    naturalSort.insensitive = true; // sigh\n\n    const options = this.state.roles.sort(naturalSort).map((role) => {\n      return <option key={role.name} value={role.name}>{role.name}</option>;\n    });\n\n    const content = this.state.groups.sort(naturalSort).map((group) => {\n      return (\n        <li key={group}>\n          <Input label={group} data-group={group} type=\"select\" value={this.state.mapping.get(group, '')}\n                 onChange={this._updateMapping} labelClassName=\"col-sm-2\" wrapperClassName=\"col-sm-5\">\n            <option value=\"\">None</option>\n            {options}\n          </Input>\n        </li>\n      );\n    });\n\n    naturalSort.insensitive = false; // sigh 2\n\n    if (content.size === 0) {\n      return (\n        <p>\n          No LDAP/Active Directory groups found. Please verify that your{' '}\n          <a href=\"#\" onClick={this._onShowConfig}>LDAP group mapping</a>{' '}\n          settings are correct.\n        </p>\n      );\n    }\n    return (\n      <form className=\"form-horizontal\" onSubmit={this._saveMapping}>\n        <Row>\n          <Col md={12}>\n            <ul style={{ padding: 0 }}>{content}</ul>\n          </Col>\n          <Col md={10} mdPush={2}>\n            <Button type=\"submit\" bsStyle=\"primary\" className=\"save-button-margin\">Save</Button>\n            <Button onClick={this.props.onCancel}>Cancel</Button>\n          </Col>\n        </Row>\n      </form>\n    );\n  },\n});\n\nexport default LdapGroupsComponent;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ldap/LdapGroupsComponent.jsx","import React, { PropTypes } from 'react';\nimport { Row, Col, Button, Alert } from 'react-bootstrap';\n\nimport ActionsProvider from 'injection/ActionsProvider';\nconst LdapActions = ActionsProvider.getActions('Ldap');\n\nconst TestLdapConnection = React.createClass({\n  propTypes: {\n    ldapSettings: PropTypes.object.isRequired,\n    ldapUri: PropTypes.object.isRequired,\n    disabled: PropTypes.bool,\n  },\n\n  getInitialState() {\n    return {\n      serverConnectionStatus: {},\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // Reset connection status if ldapSettings changed\n    if (JSON.stringify(this.props.ldapSettings) !== JSON.stringify(nextProps.ldapSettings)) {\n      this.setState({ serverConnectionStatus: {} });\n    }\n  },\n\n  _testServerConnection() {\n    LdapActions.testServerConnection.triggerPromise(this.props.ldapSettings)\n      .then(\n        (result) => {\n          if (result.connected) {\n            this.setState({ serverConnectionStatus: { loading: false, success: true } });\n          } else {\n            this.setState({ serverConnectionStatus: { loading: false, error: result.exception } });\n          }\n        },\n        () => {\n          this.setState({\n            serverConnectionStatus: {\n              loading: false,\n              error: 'Unable to check connection, please try again.',\n            },\n          });\n        },\n      );\n\n    this.setState({ serverConnectionStatus: { loading: true } });\n  },\n\n  _getServerConnectionStyle() {\n    if (this.state.serverConnectionStatus.success) {\n      return 'success';\n    }\n    if (this.state.serverConnectionStatus.error) {\n      return 'danger';\n    }\n\n    return 'info';\n  },\n\n  render() {\n    const serverConnectionStatus = this.state.serverConnectionStatus;\n    const isDisabled = this.props.disabled || this.props.ldapUri.hostname() === '' || serverConnectionStatus.loading;\n\n    let serverConnectionResult;\n    if (serverConnectionStatus.error) {\n      serverConnectionResult = <Alert bsStyle=\"danger\">{serverConnectionStatus.error}</Alert>;\n    }\n    if (serverConnectionStatus.success) {\n      serverConnectionResult = <Alert bsStyle=\"success\">Connection to server was successful</Alert>;\n    }\n\n    return (\n      <div className=\"form-group\">\n        <Row>\n          <Col sm={9} smOffset={3}>\n            <Button id=\"ldap-test-connection\" bsStyle={this._getServerConnectionStyle()}\n                    disabled={isDisabled}\n                    onClick={this._testServerConnection}>\n              {serverConnectionStatus.loading ? 'Testing...' : 'Test Server Connection'}\n            </Button>\n            <span\n              className=\"help-block\">Performs a background connection check with the address and credentials above.</span>\n            {serverConnectionResult}\n          </Col>\n        </Row>\n      </div>\n    );\n  },\n});\n\nexport default TestLdapConnection;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ldap/TestLdapConnection.jsx","import React, { PropTypes } from 'react';\nimport { Row, Col, Button, Panel } from 'react-bootstrap';\n\nimport { Input } from 'components/bootstrap';\nimport ObjectUtils from 'util/ObjectUtils';\n\nimport ActionsProvider from 'injection/ActionsProvider';\nconst LdapActions = ActionsProvider.getActions('Ldap');\n\nconst TestLdapLogin = React.createClass({\n  propTypes: {\n    ldapSettings: PropTypes.object.isRequired,\n    disabled: PropTypes.bool,\n  },\n\n  getInitialState() {\n    return {\n      loginUser: '',\n      loginPassword: '',\n      loginStatus: {},\n    };\n  },\n\n  componentDidMount() {\n    this.style.use();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // Reset login status if ldapSettings changed\n    if (JSON.stringify(this.props.ldapSettings) !== JSON.stringify(nextProps.ldapSettings)) {\n      this.setState({ loginStatus: {} });\n    }\n  },\n\n  componentWillUnmount() {\n    this.style.unuse();\n  },\n\n  style: require('!style/useable!css!./TestLdapLogin.css'),\n\n  _changeLoginForm(event) {\n    const newState = {};\n    const key = (event.target.name === 'test_login_username' ? 'loginUser' : 'loginPassword');\n    newState[key] = event.target.value;\n    newState.loginStatus = {};\n    this.setState(newState);\n  },\n\n  _disableSubmitOnEnter(event) {\n    if (event.key && event.key === 'Enter') {\n      event.preventDefault();\n    }\n  },\n\n  _testLogin() {\n    LdapActions.testLogin.triggerPromise(this.props.ldapSettings, this.state.loginUser, this.state.loginPassword)\n      .then(\n        (result) => {\n          if (result.connected && (result.login_authenticated || !ObjectUtils.isEmpty(result.entry))) {\n            this.setState({ loginStatus: { loading: false, success: true, result: result } });\n          } else {\n            this.setState({ loginStatus: { loading: false, error: true, result: result } });\n          }\n        },\n        () => {\n          this.setState({\n            loginStatus: {\n              loading: false,\n              error: true,\n              result: {\n                exception: 'Unable to test login, please try again.',\n              },\n            },\n          });\n        },\n      );\n\n    this.setState({ loginStatus: { loading: true } });\n  },\n\n  _loginTestButtonStyle() {\n    if (this.state.loginStatus.success) {\n      return 'success';\n    }\n    if (this.state.loginStatus.error) {\n      return 'danger';\n    }\n\n    return 'info';\n  },\n\n  _formatLoginStatus(loginStatus) {\n    // Don't show any status if login didn't complete\n    if (!loginStatus.error && !loginStatus.success) {\n      return null;\n    }\n\n    const title = `Connection ${loginStatus.error ? 'failed' : 'successful'}`;\n    const style = loginStatus.error ? 'danger' : 'success';\n\n    let userFound;\n    if (ObjectUtils.isEmpty(loginStatus.result.entry)) {\n      userFound = <i className=\"fa fa-times ldap-failure\" />;\n    } else {\n      userFound = <i className=\"fa fa-check ldap-success\" />;\n    }\n\n    let loginCheck;\n    if (loginStatus.result.login_authenticated) {\n      loginCheck = <i className=\"fa fa-check ldap-success\" />;\n    } else if (this.state.loginPassword === '') {\n      loginCheck = <i className=\"fa fa-question ldap-info\" />;\n    } else {\n      loginCheck = <i className=\"fa fa-times ldap-failure\" />;\n    }\n\n    let serverResponse;\n    if (loginStatus.result.exception) {\n      serverResponse = <pre>{loginStatus.result.exception}</pre>;\n    }\n\n    const attributes = Object.keys(loginStatus.result.entry).map((key) => {\n      return [\n        <dt>{key}</dt>,\n        <dd>{loginStatus.result.entry[key]}</dd>,\n      ];\n    });\n    const formattedEntry = (attributes.length > 0 ? <dl>{attributes}</dl> :\n    <p>LDAP server did not return any attributes for the user.</p>);\n\n    const groups = (loginStatus.result.groups ? loginStatus.result.groups.map(group => <li key={group}>{group}</li>) : []);\n    const formattedGroups = (groups.length > 0 ? <ul style={{ padding: 0 }}>{groups}</ul> :\n    <p>LDAP server did not return any groups for the user.</p>);\n\n    return (\n      <Row>\n        <Col sm={9} smOffset={3}>\n          <Panel header={title} bsStyle={style} className=\"ldap-test-login-result\">\n            <ul className=\"login-status\">\n              <li><h4>User found {userFound}</h4></li>\n              <li><h4>Login attempt {loginCheck}</h4></li>\n            </ul>\n            {serverResponse && <h4>Server response</h4>}\n            {serverResponse}\n            <h4>User's LDAP attributes</h4>\n            {formattedEntry}\n            <h4>User's LDAP groups</h4>\n            {formattedGroups}\n          </Panel>\n        </Col>\n      </Row>\n    );\n  },\n\n  render() {\n    const loginStatus = this.state.loginStatus;\n    const loginDisabled = this.props.disabled || !this.state.loginUser || loginStatus.loading;\n\n    return (\n      <div>\n        <Input id=\"test_login_username\" labelClassName=\"col-sm-3\" wrapperClassName=\"col-sm-9\" label=\"Login test\"\n               help=\"Verify the previous settings by loading the entry for the given user name. If you omit the password, no authentication attempt will be made.\">\n          <Row className=\"row-sm\">\n            <Col sm={5}>\n              <input type=\"text\" id=\"test_login_username\" name=\"test_login_username\" className=\"form-control\"\n                     value={this.state.loginUser} onChange={this._changeLoginForm}\n                     onKeyPress={this._disableSubmitOnEnter}\n                     placeholder=\"Username for login test\" disabled={this.props.disabled} />\n            </Col>\n            <Col sm={5}>\n              <input type=\"password\" id=\"test_login_password\" name=\"test_login_password\" className=\"form-control\"\n                     value={this.state.testLoginPassword} onChange={this._changeLoginForm}\n                     onKeyPress={this._disableSubmitOnEnter}\n                     placeholder=\"Password\" disabled={this.props.disabled} />\n            </Col>\n            <Col sm={2}>\n              <Button bsStyle={this._loginTestButtonStyle()} disabled={loginDisabled}\n                      onClick={this._testLogin}>\n                {loginStatus.loading ? 'Testing...' : 'Test login'}\n              </Button>\n            </Col>\n          </Row>\n        </Input>\n        {this._formatLoginStatus(loginStatus)}\n      </div>\n    );\n  },\n});\n\nexport default TestLdapLogin;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ldap/TestLdapLogin.jsx","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport DocsHelper from 'util/DocsHelper';\nimport PermissionsMixin from 'util/PermissionsMixin';\n\nimport {} from 'components/authentication'; // Make sure to load all auth config plugins!\n\nimport PageHeader from 'components/common/PageHeader';\nimport DocumentationLink from 'components/support/DocumentationLink';\n\nimport AuthenticationComponent from 'components/authentication/AuthenticationComponent';\n\nconst AuthenticationPage = React.createClass({\n\n  propTypes: {\n    children: React.PropTypes.object,\n    location: React.PropTypes.object.isRequired,\n    params: React.PropTypes.object.isRequired,\n    history: React.PropTypes.object.isRequired,\n  },\n\n  mixins: [PermissionsMixin],\n\n  render() {\n    return (\n      <span>\n        <PageHeader title=\"Authentication Management\">\n          <span>Configure Graylog's authentication providers and manage the active users of this Graylog cluster.</span>\n          <span>Read more authentication in the <DocumentationLink page={DocsHelper.PAGES.USERS_ROLES}\n                                                                   text=\"documentation\" />.</span>\n        </PageHeader>\n\n        <Row className=\"content\">\n          <Col md={12}>\n            <AuthenticationComponent location={this.props.location} params={this.props.params} history={this.props.history}>\n              {this.props.children}\n            </AuthenticationComponent>\n          </Col>\n        </Row>\n      </span>\n    );\n  },\n});\n\nexport default AuthenticationPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/AuthenticationPage.jsx","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"._1-7A7Wk93i64abyb8RD454{border-right:1px solid #d1d1d1}._19WVz2Pea58X7AsOkte5Ft{border-left:1px solid #d1d1d1;margin-left:-1px}.GzKGC_ryb3VuVQhgY0qvA{border-bottom:1px solid #d1d1d1}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"subnavigation\": \"_1-7A7Wk93i64abyb8RD454\",\n\t\"contentpane\": \"_19WVz2Pea58X7AsOkte5Ft\",\n\t\"divider\": \"GzKGC_ryb3VuVQhgY0qvA\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/components/authentication/AuthenticationComponent.css\n// module id = 1422\n// module chunks = 21","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".ldap-test-login-result h4{margin-bottom:10px}.ldap-test-login-result .login-status{padding:0;margin-bottom:10px}.ldap-test-login-result .login-status li{display:inline-block;margin-right:20px}.ldap-success{color:green}.ldap-failure{color:maroon}.ldap-info{color:#337ab7}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/components/ldap/TestLdapLogin.css\n// module id = 1423\n// module chunks = 21","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!./AuthenticationComponent.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./AuthenticationComponent.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./AuthenticationComponent.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/style-loader!./~/css-loader!./src/components/authentication/AuthenticationComponent.css\n// module id = 1493\n// module chunks = 21","var refs = 0;\nvar dispose;\nvar content = require(\"!!../../../node_modules/css-loader/index.js!./TestLdapLogin.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nexports.use = exports.ref = function() {\n\tif(!(refs++)) {\n\t\texports.locals = content.locals;\n\t\tdispose = require(\"!../../../node_modules/style-loader/addStyles.js\")(content, {});\n\t}\n\treturn exports;\n};\nexports.unuse = exports.unref = function() {\n\tif(!(--refs)) {\n\t\tdispose();\n\t\tdispose = null;\n\t}\n};\nif(module.hot) {\n\tvar lastRefs = module.hot.data && module.hot.data.refs || 0;\n\tif(lastRefs) {\n\t\texports.ref();\n\t\tif(!content.locals) {\n\t\t\trefs = lastRefs;\n\t\t}\n\t}\n\tif(!content.locals) {\n\t\tmodule.hot.accept();\n\t}\n\tmodule.hot.dispose(function(data) {\n\t\tdata.refs = content.locals ? 0 : refs;\n\t\tif(dispose) {\n\t\t\tdispose();\n\t\t}\n\t});\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/style-loader/useable.js!./~/css-loader!./src/components/ldap/TestLdapLogin.css\n// module id = 1500\n// module chunks = 21"],"sourceRoot":""}